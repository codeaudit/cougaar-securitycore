This README file explains how to configure the security services. Either CSMART or
.INI configuration files may be used to configure the security services.


==================================================================================================
Node configuration
==================
Every node must have the following components:
* The KAoS guard component registers itself to the policy domain manager, and receives
  the security policies from the policy domain manager. The policies are then propagated
  to the policy enforcers running on that node. It must run on every node.
* The Security component factory component is responsible for initializing and registering
  the security services. It must run on every node.
  The security component factory takes one parameter, which must be set to the name of the
  security community in which the node agent is running.
* The JAAS agent binder component executes every agent in a separate user context.
  The component must run on every node.
* The AccessAgentBinderFactory is a binder to the message transport service. It controls
  what messages can be sent or received.
* The BlackboardServiceFilter is a binder to the blackboard service. It currently passes
  all the calls transparently to the blackboard service.
* Aspects: the MessageProtectionAspect should be included if inter-agent messages shall be
  encrypted. The MessageProtectionService should be closest to the base implementation,
  ie, first in the composition order.  So it should also be first in the ini file,
  just as it would be first in the -D aspects option and first in the CSMART graphical
  display.

Sample INI configuration
------------------------
Node.AgentManager.Agent.SecurityComponent(HIGH)=safe.util.SAFESecurityComponent
Node.AgentManager.Agent.SecurityComponent(HIGH)=org.cougaar.core.security.provider.SecurityComponentFactory(Enclave-2)
Node.AgentManager.Binder(BINDER) = org.cougaar.core.security.access.JaasAgentBinderFactory
Node.AgentManager.Binder(BINDER) = org.cougaar.core.security.access.AccessAgentBinderFactory
Node.AgentManager.Binder(BINDER) = org.cougaar.core.security.access.BlackboardServiceFilter
Node.AgentManager.Agent.MessageTransport.Aspect(INTERNAL) = org.cougaar.core.mts.MessageProtectionAspect
Node.AgentManager.Agent.MessageTransport.Aspect(INTERNAL) = org.cougaar.core.mts.StatisticsAspect

Recipes
-------
KAoS guard:                    SafeUWFSecurityComponentAddition-export.sql
Security component factory:    NAISecurityComponents-export.sql
JAAS agent binder:             NAIJaasBinder-export.sql
Message Access binder:         NAIAccessAgentBinder-export.sql
Blackboard binder:             NAIBlackboardBinder-export.sql
MessageProtection Aspect:      NAIMessageProtectionAspect-export.sql
Statistics Aspect:             NAIStatisticsAspect-export.sql

Note: The IHMCSecurityComponent-export.sql recipe is obsolete.

==================================================================================================
User Management Agent
=====================
The user management agent is responsible for managing users.
1) Start by reading the README.userdb file.
2) Create a user admin agent. For instance, create the "UserAdminAgent" agent.
   The user admin agent can be created using an AgentInsertionRecipe recipe.
3) Add the UserAdminServlet to the user admin agent. This can be done by creating a SpecificInsertionRecipe recipe.

Sample INI configuration
------------------------
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.crypto.ldap.admin.UserAdminServlet, /useradmin)

Recipes
-------
User admin agent:              UserAdminAgent-export.sql

Or, one user admin agent for each enclave:
                               UserAdminAgent1-export.sql
                               UserAdminAgent2-export.sql
                               UserAdminAgent3-export.sql
                               UserAdminAgent4-export.sql

User admin servlet:            UserAdminServlet-export.sql

==================================================================================================
Policy Domain Manager
=====================
The policy domain manager is responsible for managing the policy of a security domain.

The policy domain manager consists of two agents: 1) the PolicyManager
agent, and 2) the PolicyManagerServlet agent. The PolicyAdminServletComponent
should no longer be part of the PolicyManager agent, but rather it should be
part of a separate agent. If you look at our .ini files in cvs
(safe\test\configs\PolicyManager) you can see the changes. These changes
were necessary after we started using the blackboard to send messages. I
can't remember the exact reason off the top of my head... hopefully this
doesn't create any difficulties?

Sample INI configuration
------------------------

Policy manager node:
++++++++++++++++++++
All the node entries described in the "Node configuration" section should also be added.
[ Clusters ]
cluster = PolicyManager
cluster = PolicyManagerServlet
[ AlpProcess ]
[ Policies ]
[ Permission ]
[ AuthorizedOperation ]

Policy manager agent:
+++++++++++++++++++++
[ Cluster ]
class = org.cougaar.core.agent.ClusterImpl
uic = PolicyManager
cloned = false
[ PlugIns ]
plugin = org.cougaar.core.servlet.SimpleServletComponent(org.cougaar.planning.servlet.PlanViewServlet, /tasks)
plugin = safe.policyManager.DomainManagerPlugin
plugin = safe.policyManager.ConditionMonitorPlugin
plugin = safe.policyManager.SetOperatingModeServletComponent
plugin = safe.policyManager.PolicyExpanderPlugin
# NAI Policy Expander Plugin
plugin = org.cougaar.core.security.policy.PolicyExpanderPlugin
# Inter-agent operating mode plugin
plugin = org.cougaar.core.adaptivity.OperatingModePolicyManager
[ Policies ]
[ Permission ]
[ AuthorizedOperation ]


Policy manager Servlet agent:
+++++++++++++++++++++++++++++
[ Cluster ]
class = org.cougaar.core.agent.ClusterImpl
uic = PolicyManagerServlet
cloned = false
[ PlugIns ]
plugin = safe.policyManager.PolicyAdminServletComponent
[ Policies ]
[ Permission ]
[ AuthorizedOperation ]


Agent Recipes
-------------
IHMCPolicyDomainManagerAgent-export.sql
IHMCPolicyDomainManagerServletAgent-export.sql

Or, one policy manager (e.g. two agents) for each enclave:
IHMCPolicyDomainManager1Agent-export.sql
IHMCPolicyDomainManager1ServletAgent-export.sql

IHMCPolicyDomainManager2Agent-export.sql
IHMCPolicyDomainManager2ServletAgent-export.sql

IHMCPolicyDomainManager3Agent-export.sql
IHMCPolicyDomainManager3ServletAgent-export.sql

IHMCPolicyDomainManager4Agent-export.sql
IHMCPolicyDomainManager4ServletAgent-export.sql

Plugin Recipes
--------------
DomainManagerPlugin:                IHMCDomainManagerPlugin-export.sql
ConditionMonitorPlugin:             IHMCConditionMonitorPlugin-export.sql 
SetOperatingModeServletComponent:   IHMCSetOperatingModeServlet-export.sql 
KAoS PolicyExpanderPlugin:          IHMCPolicyExpanderPlugin-export.sql
NAI PolicyExpanderPlugin:           NAIPolicyExpanderPlugin-export.sql
OperatingModePolicyManager:         MnROperatingModePolicyManager-export.sql 

PolicyAdminServletComponent:        IHMCPolicyAdminServletComponent-export.sql


==================================================================================================
Society and Enclave M&R Manager Agents
======================================
The society manager and the enclave managers have the same configuration except for the name
of the file containing the adaptivity plays.
Each enclave should have one enclave security manager agent.
Create one recipe for each enclave security manager agent. 
The society and enclave M&R managers should have the following components:
 + The M&R sensors (like any other node),
 + The M&R data collectors
 + The M&R analyzers
 + The M&R manager plugins
 + The adaptivity engine plugins

Sample INI configuration
------------------------
# M&R plugins
plugin=org.cougaar.core.security.monitoring.plugin.CapabilitiesProcessingPlugin
plugin=org.cougaar.core.security.monitoring.plugin.CapabilitiesConsolidationPlugin
plugin=org.cougaar.core.security.monitoring.plugin.MnRQueryReceiverPlugin
plugin=org.cougaar.core.security.monitoring.plugin.MnRQueryResponderPlugin

# Adaptivity engine plugins
# All plugins below are required except for the AEViewerServlet.
# However, if you want to view the conditions and operating modes then you'll need the
# AEViewerServlet
plugin = org.cougaar.core.servlet.BlackboardServletComponent(org.cougaar.core.adaptivity.AEViewerServlet, /aeviewer)
plugin = org.cougaar.core.adaptivity.AdaptivityEngine
plugin = org.cougaar.core.adaptivity.ConditionServiceProvider
plugin = org.cougaar.core.adaptivity.OperatingModeServiceProvider
# For the society manager:
plugin = org.cougaar.core.adaptivity.PlaybookManager(AMnRPlaysSocietyManager.txt)

# For the enclave manager:
plugin = org.cougaar.core.adaptivity.PlaybookManager(AMnRPlaysEnclave.txt)

Recipes
-------
CapabilitiesProcessingPlugin:       NAICapProcessPlugin-export.sql 
CapabilitiesConsolidationPlugin:    NAICapConsolidatePlugin-export.sql 
MnRQueryReceiverPlugin:             MnRQueryReceiverPlugin-export.sql 
MnRQueryResponderPlugin:            MnRQueryResponderPlugin-export.sql

AdaptivityEngine:                   MnRAdaptivityEngine-export.sql:
ConditionServiceProvider:           MnRConditionServiceProvider-export.sql:
OperatingModeServiceProvider:       MnROperatingModeServiceProvider-export.sql:
PlaybookManager:                    MnRPlaybookManager-export.sql

==================================================================================================
Monitoring & Response sensors
=============================
Sensors monitor monitor the system and generate IDMEF events when exceptional conditions occur.
For instance, a sensor may generate an IDMEF event when an intrustion has been detected.
Currently, the following events may be generated:
1) Java security manager events
2) Jar file signature failures events
3) Login failure events
4) Message protection failure events
5) Message access control events
6) Data protection events

Events of type 1) and 2) are handled by the BootStrapEventPlugin plugin.
Events of type 3) are handled by the LoginFailureSensor plugin
Events of type 4) and 5) are handled by the MessageFailureSensor plugin
Events of type 6) are handled by the DataProtectionSensor plugin
These plugins should be included in all node agents. They should not be installed on agents
that are not node agents.

Sample INI configuration
------------------------
This Plugin services remote subscription requests.  It sends data back to an aggregation 
as requested.  It depends on the presence of the AggDomain. See AggAgent plugin configuration
in the "Monitoring & Response Data Colletors" section below.
plugin = org.cougaar.lib.aggagent.plugin.RemoteSubscriptionPlugin


The NAI sensors are configured as follow:
plugin = org.cougaar.core.security.monitoring.plugin.BootStrapEventPlugin
plugin = org.cougaar.core.security.monitoring.plugin.MessageFailureSensor
plugin = org.cougaar.core.security.monitoring.plugin.LoginFailureSensor
plugin = org.cougaar.core.security.monitoring.plugin.DataProtectionSensor

Recipes
-------
RemoteSubscriptionPlugin:      AGG-RemoteSubscription-export.sql

BootStrap Event Plugin:        MnRBootStrapEventPlugin
Login Failure sensor:          MnRLoginFailureRatePlugin
Message Failure Sensor:        MnRMessageFailureSensor
Data Protection Sensor:        MnRDataProtectionSensor

==================================================================================================
Monitoring & Response Data Colletors
====================================
Sensors publish IDMEF events to their local blackboard. Those events may then be collected by other agents
for further analyzis. For instance, data may be collected from various sensors to correlate the events.

Events may be collected by a variety of components:
* Adaptive filters, which collect data based on various parameters such as the threatcon level.
* EventQueryPlugin. In most cases, analyzers rely on the adaptive filters to collect the events, but
  they may also be configured to use a simple collection mechanism.
* Security Console. The security console may collect data from various sensors and display the events
  on the console.

The data collectors use the AggAgent mechanism to collect IDMEF events. Both the requestor and the sensors
need to be configured to enable AggAgent.

The AggAgent mechanism requires the AlertPlugin and the AggregationPlugin plugins on the requestor side.
The RemoteSubscriptionPlugin must be installed on every agent where a sensor is running.
Note that since sensors are generally configured to run on every node, sensors are also
installed on data collector nodes. Therefore, the data collectors have three plugins.

The EventQueryPlugin is a simple data collector component. It queries for IDMEF messages and keeps
an updated list of Sensors with the capability. All events are copied to the blackboard.
Note that the EventQueryPlugin publishes the IDMEF events as if they had been generated by a
sensor runnig on that agent.

The EventQueryPlugin takes the following parameters:
Parameter 1: String - The agent name of the Society Security Manager.
Parameter 2: String - A UnaryPredicate class that selects the IDMEF messages.
Parameter 3: String - A class name that supports the QueryClassificationProvicer interface.
                      A single class may support both parameter 2 and 3, in which case parameter 3
                      does not have to be specified.

Sample INI configuration
------------------------
plugin = org.cougaar.lib.aggagent.plugin.AggregationPlugin
plugin = org.cougaar.lib.aggagent.plugin.AlertPlugin

Below are two examples of EventQueryPlugin configuration.
The first plugin is configured to collect login failure events. It should be installed on the
society security manager.
plugin = org.cougaar.core.security.monitoring.plugin.EventQueryPlugin(SocietySecurityManager,org.cougaar.core.security.monitoring.plugin.AllLoginFailures)

The second plugin is configured to collect message failure events. It should be installed on every
enclave security manager.
plugin = org.cougaar.core.security.monitoring.plugin.EventQueryPlugin(SocietySecurityManager,org.cougaar.core.security.monitoring.plugin.AllMessageFailures)

Recipes
-------
AggregationPlugin:                 AGG-AggregationPlugin-export.sql 
AlertPlugin:                       AGG-AlertPlugin-export.sql

EventQueryPlugin (society mgr):    MnREventQueryPluginLoginFailures-export.sql
EventQueryPlugin (enclave mgr):    MnREventQueryPluginMessageFailures-export.sql

==================================================================================================
Monitoring & Response Analyzers
===============================
Analyzers analyze data from various IDMEF sources. For instance, analyzers may correlate data from
multiple sensors and trigger alerts when a threshold has been reached.

The RateCalculatorPlugin has been built to compute the rate at which IDMEF from a given type have been
received. This analyzer is used to compute the login failure rate and the message failure rate.
The RateCalculatorPlugin queries for IDMEF messages and creates a condition from the results.
The arguments to the plugin component in the .ini file determine how rates are generated:
Parameter 1: Integer -  Poll interval in seconds. Determines how often the rate is recalculated.
Parameter 2: Integer -  Window for IDMEF messages to be gathered over to determine the rate.
                        The value is a duration in seconds.
Parameter 3: String  -  The IDMEF message classification to examine.
Parameter 3: String  -  The name of the condition to post to the blackboard

Sample INI configuration
------------------------
The login rate plugin should be installed on the society security manager.
plugin = org.cougaar.core.security.monitorin.plugin.RateCalculatorPlugin(20,60,org.cougaar.core.security.monitoring.LOGIN_FAILURE,org.cougaar.core.security.monitoring.LOGIN_FAILURE_RATE)

The message rate plugin should be installed on every enclave security manager.
plugin = org.cougaar.core.security.monitorin.plugin.RateCalculatorPlugin(20,60,org.cougaar.core.security.monitoring.MESSAGE_FAILURE,org.cougaar.core.security.monitoring.MESSAGE_FAILURE_RATE)

Recipes
-------
RateCalculatorPlugin (login):      MnRRateCalculatorPluginLoginFailures-export.sql
RateCalculatorPlugin (messages):   MnRRateCalculatorPluginMessageFailures-export.sql

==================================================================================================
Monitoring & Response Responders
================================
Responders monitor the system and respond to intrusions. There are currently two responders.

The UserLockoutPlugin queries login failures and will lockout users who have failed to login too many times.
The values for maximum login failures and lockout duration are retrieved from Operating Modes driven by
the adaptivity engine.
The UserLockoutPlugin needs to collect data from all login failure sensors in a particular domain.
Therefore, it requires the AggAgent plugins described in the "Monitoring & Response Data Colletors" section,
as well as one data collector plugin. For instance, it may be configured to use the EventQueryPlugin.

The CertificateRevokerPlugin responds to message failures by revoking agents that send too many
messages that do not comply with the policy.

The UserLockoutPlugin and CertificateRevokerPlugin take three parameters:
Parameter 1: Integer - The duration to wait (in seconds) between checking the login failures for deletion.
Parameter 2: Integer - The amount of time to keep the login failures before deleting it.
Parameter 3: String  - The operating mode name of the responder.

Sample INI configuration
------------------------
The user lockout plugin should be added to the society security manager.
plugin = org.cougaar.core.security.monitoring.plugin.UserLockoutPlugin(600,86400, org.cougaar.core.security.monitoring.MAX_LOGIN_FAILURES)


The CertificateRevokerPlugin is responsible for revoking agent certificates when the number of messages that do
not comply with the policy exceeds some threshold. 
plugin = org.cougaar.core.security.monitoring.plugin.CertificateRevokerPlugin(600,86400, org.cougaar.core.security.monitoring.MAX_MESSAGE_FAILURES)

Recipes
-------
UserLockoutPlugin:                MnRUserLockoutPlugin-export.sql
CertificateRevokerPlugin:         MnRCertificateRevokerPlugin-export.sql

==================================================================================================
Smart-Cards
===========
* Verify that the following rpms are installed on Linux. If not, install them. These rpms provide USB
  support.
* Smart-cards may be used for user authentication. They may also be used to store keystore passwords.
  The BootPolicy.crypto.xml file must be edited to specify that the keystore password should be
  stored in the smart-card.

==================================================================================================
Policy files
============
* BootPolicy.DataProtection.xml:
This file describes how the persisted blackboard data is protected. When persistence is enabled,
blackboard data can be saved to a file system or a database. The persistence services uses the data
protection service to sign and/or encrypt the data.

* BootPolicyMsgAccess.xml
This file describes what access control is performed on incoming and outgoing messages.
Every message sent and received by an agent has to go through our message access control binder,
which may reject messages depending on the policy parameters.

* cryptoPolicy.xml
This file describes the list of Certificate authorities that a given node is trusting.
It also defines certificate parameters when a node is issuing certificates for the agents.

* BootPolicyServlet.xml
This file describes user authentication and authorization policy parameters.
It defines the user authentication requirements (e.g. SSL is required) and the servlet authorization
(e.g. Role X can access serlvet Y).

* BootPolicyCrypto.xml
This file describes what crypto is applied to incoming and outgoing messages. For instance,
all outgoing messages may be signed and encrypted.

* UserDB.xml
This file describes parameters to access the user database


==================================================================================================
Certificate Authority
=====================
Certificate authorities should always run in the before other nodes are started.


Sample INI configuration
------------------------

[ Cluster ]
class = org.cougaar.core.agent.ClusterImpl
uic = UIC/CougaarCA

[ Plugins ]
# Presentation
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.Index, /CA/Index)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.Browser, /CA/Browser)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.Main, /CA/Main)

# Client certificate management
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.CaKeyManagement, /CA/CaKeyManagement)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.CertificateDetailsServlet, /CA/CertificateDetailsServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.DownloadCertificateServlet, /CA/DownloadCertificateServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.CertificateList, /CA/CertificateList)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.CertificateSigningRequest, /CA/CertificateSigningRequest)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.BrowserSigningRequest, /CA/BrowserSigningRequest)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.PendingCertDetailsServlet, /CA/PendingCertDetailsServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.PendingCertificateServlet, /CA/PendingCertificateServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.ProcessPendingCertServlet, /CA/ProcessPendingCertServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.RevokeCertificateServlet, /CA/RevokeCertificateServlet)

# CA key management
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.CreateCaKeyServlet, /CA/CreateCaKeyServlet)
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.certauthority.servlet.ListCaKeysServlet, /CA/ListCaKeysServlet)


The following is an example configuration that includes one root CA and four subordinate CAs.
Root CA:
--------
DN:           cn=1AD-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:   ca1ADAgent
Node name:    ca1ADNode
CSR:          http://yew:5561/$ca1ADAgent/CA/CertificateSigningRequest
LDAP:         ldap://yew:389/dc=1adCA,dc=cougaar,dc=org

Subordinate CA 1:
-----------------
DN:           cn=1AD-Enclave1-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:   ca1ADEnclave1Agent
Node name:    ca1ADEnclave1Node
CSR:          http://juniper:5561/$ca1AEnclave1DAgent/CA/CertificateSigningRequest
LDAP:         ldap://yew:389/dc=1adEnclave1CA,dc=cougaar,dc=org
Enclave name: 1AD-Enclave1
 
Subordinate CA 2:
-----------------
DN:           cn=1AD-Enclave2-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:   ca1ADEnclave2Agent
Node name:    ca1ADEnclave2Node
CSR:          http://maple:5561/$ca1ADEnclave2Agent/CA/CertificateSigningRequest
LDAP:         ldap://yew:389/dc=1adEnclave2CA,dc=cougaar,dc=org
Enclave name: 1AD-Enclave2

Subordinate CA 3:
-----------------
DN:           cn=1AD-Enclave3-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:   ca1ADEnclave3Agent
Node name:    ca1ADEnclave3Node
CSR:          http://maple:5561/$ca1ADEnclave3Agent/CA/CertificateSigningRequest
LDAP:         ldap://yew:389/dc=1adEnclave3CA,dc=cougaar,dc=org
Enclave name: 1AD-Enclave3

Subordinate CA 4:
-----------------
DN:           cn=1AD-Enclave4-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:   ca1ADEnclave4Agent
Node name:    ca1ADEnclave4Node
CSR:          http://maple:5561/$ca1ADEnclave4Agent/CA/CertificateSigningRequest
LDAP:         ldap://yew:389/dc=1adEnclave4CA,dc=cougaar,dc=org
Enclave name: 1AD-Enclave3

==================================================================================================
Community Configuration
=======================
This section describes the additional communities and agents that must be added to the
configuration.

We use the following convention:
Community-name
  Node-name
    Agent-name

+++++++++++++++++++++++
Security-Mgmt-COMM
  SOCIETY-SECURITY
    SocietySecurityMnRManager           Roles: SecurityMnRManager
    PolicyDomainManager
    PolicyDomainManagerServlet
  USERADMIN-NODE
    UserAdminAgent

  Other agents:
    Enclave1SecurityMnRManager
    Enclave2SecurityMnRManager
    Enclave3SecurityMnRManager
    Enclave4SecurityMnRManager

    PolicyDomainManager1
    PolicyDomainManager1Servlet
    PolicyDomainManager2
    PolicyDomainManager2Servlet
    PolicyDomainManager3
    PolicyDomainManager3Servlet
    PolicyDomainManager4
    PolicyDomainManager4Servlet

    UserAdminAgent1
    UserAdminAgent2
    UserAdminAgent3
    UserAdminAgent4


Enclave1Security-COMM
  ENCLAVE1-MANAGEMENT
    Enclave1SecurityMnRManager          Roles: SecurityMnRManager
    PolicyDomainManager1
    PolicyDomainManager1Servlet
    UserAdminAgent1

Enclave2Security-COMM
  ENCLAVE2-MANAGEMENT
    Enclave2SecurityMnRManager          Roles: SecurityMnRManager
    PolicyDomainManager2
    PolicyDomainManager2Servlet
    UserAdminAgent2

Enclave3Security-COMM
  ENCLAVE3-MANAGEMENT
    Enclave3SecurityMnRManager          Roles: SecurityMnRManager
    PolicyDomainManager3
    PolicyDomainManager3Servlet
    UserAdminAgent3

Enclave4Security-COMM
  ENCLAVE4-MANAGEMENT  
    Enclave4SecurityMnRManager          Roles: SecurityMnRManager
    PolicyDomainManager4
    PolicyDomainManager4Servlet
    UserAdminAgent4

