<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Cougaar security services automated tests">
    <property name="base.directory.name" value="."/>
    <property name="analysis.directory.name" value="${base.directory.name}/analysis"/>

    <!-- The branch name of the Cougaar Standard Edition -->
    <property name="cougaar.branch.name" value="${anthill.cougaar.branch.name}"/>

    <property name="project.branch.name" value="${anthill.project.branch.name}"/>

    <!-- The parent directory of org.cougaar.install.path -->
    <property name="org.cougaar.install.path.parent" value="${user.home}/nightly-cougaar"/>

    <!-- The name of the directory where Cougaar will be built 
         (or a cache of downloaded files) -->
    <property name="org.cougaar.build.path" value="${org.cougaar.install.path.parent}/${cougaar.branch.name}/build"/>

    <!-- The name of the directory where overlays are downloaded -->
    <property name="overlays.directory.name" value="${base.directory.name}/staging"/>

    <!-- cougaar install path on remote testbed -->
    <property name="testbed.cip.dir" value="~/UL/cougaar"/>

    <property name="zip.file.name" value="cougaar-test.zip"/>

    <!-- Load additional properties which are used to upload
         project artifacts to a web server and perform tests.
         Properties stored in that file should be:
         - webdav.url: The URL where to upload the overlay ZIP file.
            For example, webdav.url=http://panther3.va.cougaarsoftware.com:8080/webdav/cougaar
         - testbed.operator.host: The name of the operator host on the testbed.
    -->
    <property file="${user.home}/anthill.properties"/>
    
    <property file="${base.directory.name}/automated-test-build.properties"/>

    <target name="init">
      <fail message="anthill.cougaar.branch.name is not defined" unless="anthill.cougaar.branch.name"/>
      <mkdir dir="${overlays.directory.name}"/>
      <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
           <pathelement location="${base.directory.name}/build/lib/ant-contrib-1.0b1.jar"/>
        </classpath>
      </taskdef>
      <delete dir="${analysis.directory.name}"/>
      <mkdir dir="${analysis.directory.name}"/>
    </target>

    <target name="all" depends="init">
      <!--
         Perform automated tests of the security services.
         The following steps are performed:
         1) Download Cougaar locally.
         2) Checkout and build the security service overlays.
         3) Create a ZIP files containing:
              - Cougaar
              - The security services overlay
         4) Create a COUGAAR_INSTALL_PATH directory on a testbed machine
         5) SCP the ZIP files to the testbed machine
         6) Unzip ZIP files in the newly created COUGAAR_INSTALL_PATH
         7) SCP a modified loggingConfig.conf file to the testbed machine.
         8) Run the PING society on the testbed machine for 20 minutes.
         9) SCP the log4j files from the testbed machine.
         10) Analyze the log4j files. Look for:
               - Missing statements that should have been logged but were not.
               - Extra statements that indicate failures (e.g. exceptions)
      -->
      <!-- Step 1: download cougaar. This is performed automatically
           by the cougaarbuild ant script. -->
      <!-- Step 2: obtain the security service overlays -->
      <antcall target="get-overlays"/>
      <!-- Step 3: create ZIP file -->
      <antcall target="zip-overlays"/>
      <!-- Step 4, 5 and 6: create ZIP file -->
      <antcall target="scp-files-to-testbed"/>
      <!-- Step 8: Run society-->
      <antcall target="run-society"/>
      <!-- Step 9: Retrieve log4j log files -->
      <antcall target="retrieve-output-files"/>
    </target>

    <target name="get-overlays" depends="init">
      <if>
        <isset property="webdav.url"/>
        <then>
          <property name="module.build.list"
             value="secure_bootstrapper,secure_util,fwsupport,secure_data_protection,securityservices,secure_monitoring,secure-coordinator,securityTests,security_moptools"/>
          <for list="${module.build.list}" delimiter="," param="build.module.name">
             <sequential>
                <!-- Name of ZIP file is:
                     ${project.name}-${project.branch.name}-${cougaar.branch.name}.zip
                     Where:
                       - project.name is the name of the project (e.g. securityservices)
                       - project.branch.name is the branch name of the project (e.g. securityservices B11_2)
                       - cougaar.branch.name is the name of the cougaar branch against which the module was built.
                 -->
                <echo message="Retrieving @{build.module.name} ZIP file..."/>
                <get src="${webdav.url}/@{build.module.name}-SNAPSHOT-${project.branch.name}-${cougaar.branch.name}.zip"
                     dest="${overlays.directory.name}/@{build.module.name}-SNAPSHOT-${project.branch.name}-${cougaar.branch.name}.zip"/>
             </sequential>
          </for>
          <!-- Add Cougaar support modules -->
          <get src="${webdav.url}/support/yp.tar.gz"
                   dest="${overlays.directory.name}/yp.tar.gz"/>
          <get src="${webdav.url}/support/acme-enclave-support.zip"
                   dest="${overlays.directory.name}/acme-enclave-support.zip"/>
          <get src="${webdav.url}/support/isat.tar.gz"
                   dest="${overlays.directory.name}/isat.tar.gz"/>
          <get src="${webdav.url}/support/acme_oss_1.6.zip"
                   dest="${overlays.directory.name}/acme_oss_1.6.zip"/>
        </then>
      </if>
    </target>

    <target name="zip-overlays">
       <echo message="Preparing zip file containing all overlays and Cougaar SE"/>
       <zip destfile="${zip.file.name}">
         <!-- Add Cougaar SE ZIP files -->
         <fileset dir="${org.cougaar.build.path}">
           <patternset>
             <include name="*.zip"/>
           </patternset>
         </fileset>
         <!-- Add security services modules -->
         <fileset dir="${overlays.directory.name}">
           <patternset>
             <include name="*.zip"/>
             <include name="*.tar.gz"/>
           </patternset>
         </fileset>
       </zip>
    </target>

    <target name="scp-files-to-testbed">
      <!-- Step 4, 5 and 6 
         The remote CIP must be installed with a link, e.g.:
            mkdir cougaar-B11_2-1201
            ln -s cougaar-B11_2-1201 cougaar
        -->
      <echo message="Copy scripts on testbed machine..."/>
      <scp file="${base.directory.name}/test/bin/install_stage*.tcsh"
           todir="${testbed.user.name}@${testbed.operator.host}:UL"
           keyfile="${user.home}/.ssh/id_dsa"
           passphrase=""/>
      <echo message="Create CIP on testbed machine..."/>
      <sshexec host="${testbed.operator.host}"
	username="${testbed.user.name}"
        keyfile="${user.home}/.ssh/id_dsa"
	command="cd $CIP ; tcsh install_stage1.tcsh"
        timeout="180000" failonerror="false"
        output="${analysis.directory.name}/sshexec.log" append="true"/>

      <echo message="Copying zip file to testbed machine..."/>
      <scp file="${zip.file.name}"
           todir="${testbed.user.name}@${testbed.operator.host}:${testbed.cip.dir}"
           keyfile="${user.home}/.ssh/id_dsa"
           passphrase=""/>

      <echo message="Install CIP on testbed machine..."/>
      <sshexec host="${testbed.operator.host}"
	username="${testbed.user.name}"
        keyfile="${user.home}/.ssh/id_dsa"
	command="cd $CIP ; tcsh install_stage2.tcsh"
        timeout="1200000"
        output="${analysis.directory.name}/sshexec.log" append="true"/>

      <echo message="Copying loggingConfig.conf file to testbed machine..."/>
      <scp file="${base.directory.name}/test/configs/logging/loggingConfig.conf"
           todir="${testbed.user.name}@${testbed.operator.host}:${testbed.cip.dir}/configs/common"
           keyfile="${user.home}/.ssh/id_dsa"
           passphrase=""/>

    </target>

    <target name="run-society">
      <!-- Run society for 30 minutes 30 * 60 * 1000-->
      <echo message="Running society..."/>
      <sshexec host="${testbed.operator.host}"
	username="${testbed.user.name}"
        keyfile="${user.home}/.ssh/id_dsa"
	command="cd ${testbed.cip.dir}/configs/ping ; ruby ASMT-PING-DEF.rb"
        timeout="1800000"
        output="${analysis.directory.name}/sshexec.log" append="true"/>

      <!-- parse results -->
      <echo message="Parsing log4j logs using checkTrace.rb..."/>
      <sshexec host="${testbed.operator.host}"
	username="${testbed.user.name}"
        keyfile="${user.home}/.ssh/id_dsa"
	command="ruby ${testbed.cip.dir}/operator/security/checkTraceAlt.rb"
        timeout="120000"
        output="${analysis.directory.name}/sshexec.log" append="true"/>

      <echo message="Parsing results of checkTraceAlt.rb..."/>
      <exec dir="${analysis.directory.name}" executable="tail" outputproperty="test.result">
         <arg line="-n 1"/>
      </exec>
      <!-- The last line should be:
              <testResult>SUCCESS</testResult>
      -->
      <condition property="test.isSuccess">
         <contains string="${test.result}" substring="SUCCESS"/>
      </condition>
      <if>
        <isset property="test.isSuccess"/>
        <then>
          <fail message="Test succeeded"/>
        </then>
        <else>
          <fail message="Test failed"/>
        </else>
      </if>
    </target>

    <target name="retrieve-output-files">
      <echo message="Retrieving log files..."/>
      <scp file="${testbed.user.name}@${testbed.operator.host}:${testbed.cip.dir}/workspace/log4jlogs/*.log"
           todir="${analysis.directory.name}"
           keyfile="${user.home}/.ssh/id_dsa"
           passphrase=""/>
    </target>
</project>

