# <copyright>
#  Copyright 2001-2003 Cougaar Software Inc.
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>


# Set this if you require remote X display.
# If you don't know what this is, you don't need it.
display = nil # eg "localhost"

# This is the org.cougaar.name.server value
# NOTE: this should use the host of the Root CA for unzip and run
# this value is used if an alpreg.ini does not exist
namesrv = nil # eg "lemon:8888:5555"

#require 'cougaar/scripting'

# used to obtain environment variables
require 'Env'

# cougaar install path
cip = ENV["COUGAAR_INSTALL_PATH"]
# cougaar workspace
cws = ENV["COUGAAR_WORKSPACE"]
# user 
user = ENV["USER"]

# http port to access cougaar node
httpport = 8800
# https port to access cougaar node
httpsport = 9800
  
#print "cip = #{cip}\n"
#print "cws = #{cws}\n"
#print "user = #{user}\n"

if (cip == nil)
  cip = "/mnt/shared/integ"
  print "defaulting to cougaar install path to #{cip}\n"
end

if (cws == nil)
  cws = "/mnt/shared/integ/workspace"
  print "defaulting to cougaar workspace to #{cws}\n"
end

if (user == nil)
  user = "asmt"
  print "defaulting to user to #{user}\n"
end

if (user == "tredmond")
  httpport = 9000
  httpsport = 9500
elsif (user == "srosset")
  httpport = 5561
  httpsport = 6561
elsif (user == "rliao1")
  httpport = 5556
  httpsport = 6556
elsif (user == "gmount")
  httpport = 5557
  httpsport = 6557
elsif (user == "rtripath")
  httpport = 5560
  httpsport = 6560
elsif (user == "mluu")
  httpport = 5555
  httpsport = 6555
elsif (user == "sri")
  httpport = 5553
  httpsport = 6553
elsif (user == "asmt")
  httpport = 8800
  httpsport = 8888
elsif (user == "junittest")
  httpport = 5570
  httpsport = 6670
elsif (user == "csmart1")
  httpport = 5571
  httpsport = 6671
elsif (user == "csmart2")
  httpport = 5575
  httpsport = 6675
elsif (user == "acme")
  httpport = 5580
  httpsport = 6680
else
  print "WARNING: Using default HTTP(S) port settings.\n"
  print "HTTP port: #{httpport}\n"
  print "HTTPS port: #{httpsport}\n"
end

society.each_host do |host|
  # the host
  hostname = host.host_name
  host.each_node do |node|
  
    # Default to localhost popups, which also requires that localhost
    #   have "xhost +localhost" for local X authorization.
    # 
    if (display)
      node.remove_env_parameter("DISPLAY")
      node.add_env_parameter("DISPLAY=#{display}:0.0")
    #else 
    #  node.remove_env_parameter("DISPLAY")
    end
    
    if (namesrv)
      node.override_parameter("-Dorg.cougaar.name.server", "#{namesrv}")
    #else
    #  node.remove_parameter("-Dorg.cougaar.name.server")
    end
    
    # ACME rule for setting security services parameters
    # 
    # Edit the classpath, install-path and config-path to reflect your 
    #   local installation.  See "java.util.Properties" for syntax details.
    #
    # ACME will add some properties to this list, such as the 
    #   "org.cougaar.node.name=..", but otherwise this is the *complete*
    #   list of properties.
    #
    # Note that some symbols, such as ";", must be encoded ("\;")
    
    # Set the Cougaar install path.
    currentCip = node.remove_parameter("-Dorg.cougaar.install.path")
    if (currentCip == nil)
      node.override_parameter("-Dorg.cougaar.install.path", "#{cip}")
    else
      node.add_parameter("-Dorg.cougaar.install.path", "#{currentCip}")
    end
    
    # Set the Config Finder class
    #node.add_parameter("-Dorg.cougaar.util.ConfigFinder.ClassName", "org.cougaar.core.security.config.SecureConfigFinder")
    #node.override_parameter("-Dlog4j.configuration", "loggingConfigStatic.conf")
    
    # Set the cougaar system path, which is used to find third-party jars
    #   (e.g. "log4j.jar").
    #
    # This defaults to "{org.cougaar.install.path} + /sys", but one can
    #   use a different directory by setting this property.
     # node.override_parameter("-Dorg.cougaar.system.path", "#{cip}/sys")
    
    # Enable or disable persistence.
    #
    # By default persistence is disabled.
    #node.override_parameter("-Dorg.cougaar.core.persistence.clear", "false")
    #node.override_parameter("-Dorg.cougaar.core.persistence.enable", "true")
    
    # Add the "java-io-patch" to allow Cougaar persistence.
    #
    # If persistence is disabled then this has no effect.  For simplicity
    # this "java-io-patch" jar should always be included.  Since this jar
    # overrides "java.io" it must be prepended to the JVM's bootclasspath.
    node.remove_parameter("-Xbootclasspath/p")
    node.add_parameter("-Xbootclasspath/p:#{cip}/lib/javaiopatch.jar")
    
    # Set the class path for starting the Node, which uses ":" separators.
    #
    # Typically only bootstrap.jar needs to be in here.
    # java.class.path=/mnt/shared/integ/lib/bootstrap.jar
    # However, the Jython interpreter requires the JAR files
    # referenced from Python be on the "real" classpath.
    node.override_parameter("-Djava.class.path", "#{cip}/lib/CougaarCRLextensions.jar")
        
    # Set the config path, which uses ";" separators.
    #
    # Note that this must end with an (escaped) semi-colon to indicate
    # that the path specified here should in addition to the default
    # search path.
    #
    # This path must contain your "cougaar.rc", database files ("*.q"), 
    #   "default.psps.xml", and other configuration files.
    #
    # Here we override the default configuration path to include both
    # the "common" directory and "GLMTrans" directory.
    #node.override_parameter("-Dorg.cougaar.config.path", "\"#{cip}/configs/common\;#{cip}/configs/glmtrans\;\"")
    node.override_parameter("-Dorg.cougaar.config.path", "\".;#{cip}/configs/security;#{cip}/configs/common;#{cip}/configs/glmtrans;#{cip}/configs/daml\"")
    #node.override_parameter("-Dorg.cougaar.config.path", "\".;#{cip}/configs/security\;\"")
    
    # Some standard memory settings.
    #
    # These are not usually modified.
    # Modified for CSI use
    #java.Xms448m
    #node.remove_parameter("-Xms")
    #node.add_parameter("-Xms512m")
    #node.remove_parameter("-Xmx")
    #node.add_parameter("-Xmx1024m")
    #node.add_parameter("-XX:ThreadStackSize=256")
    
    # Set some standard COUGAAR properties.
    node.override_parameter("-Djava.rmi.server.hostname", "#{hostname}")
    
    ########################################################################
    # A couple properties fir the kaos domain manager
    ########################################################################
    #node.override_parameter("-Dorg.cougaar.core.security.Domain", "TestDomain")
    #node.override_parameter("-Dorg.cougaar.safe.domainName", "TestDomain")
    
    
    ########################################################################
    # CSI Security services
    ########################################################################
    
    # Naming service over SSL.
    # True to enable naming service over SSL.
    # The certificates need to be createdd first before this feature is turned on.
    #
    node.override_parameter("-Dorg.cougaar.core.naming.useSSL", "true")
   
    # MTS RMI over SSL
    # The certificates need to be created first before this feature is turned on.
    #
    node.override_parameter("-Dorg.cougaar.message.protocol.classes", "org.cougaar.core.mts.SSLRMILinkProtocol")
    
    # You can also turn on/off http/s. Turn of by setting the port to -1
    # Note that HTTPS is off by default, and HTTP is at 8800
    # HTTP port number
    #node.override_parameter("-Dorg.cougaar.lib.web.http.port", "#{httpport}")
    
    # HTTPS port number
    # Comment out the following two lines if you don't want HTTPS
    # The certificates need to be createdd first before this feature is turned on.
    node.override_parameter("-Dorg.cougaar.lib.web.https.port", "#{httpsport}")
    node.override_parameter("-Dorg.cougaar.lib.web.https.factory", "org.cougaar.core.security.ssl.WebtomcatSSLServerFactory")
    
    # Cougaar workspace
    #node.override_parameter("-Dorg.cougaar.workspace", "#{cws}")
    
    # Bootstrap keystore to store JAR file keys
    node.override_parameter("-Dorg.cougaar.core.security.bootstrap.keystore", "#{cip}/configs/security/bootstrap_keystore")
    
    # Log4j Logging
    #node.override_parameter("-Dorg.cougaar.core.logging.config.filename", "loggingConfig.conf")
    #node.override_parameter("-Dorg.cougaar.core.logging.log4j.appender.SECURITY.File", "#{cws}/log4jlogs/#{hostname}.log")
    #node.override_parameter("-Dorg.cougaar.core.logging.log4j.appender.A1.File", "log4jnode.log")
    
    # Add the secure bootstrapper to the bootstrap class path
    # This is needed because of a bug in the SDK 1.4.
    # Internal Java runtime classes can create infinite recursive calls
    node.remove_parameter("-Djava.Xbootclasspath/a")
    node.add_parameter("-Xbootclasspath/a:#{cip}/lib/securebootstrapper.jar:#{cip}/lib/bootstrap.jar")
    
    # Aspects: MessageProtectionAspect
    # Add the MessageProtectionAspect to the org.cougaar.message.transport.aspects property to turn on
    # the Message Protection Service (inter-agent message protection mechanism).
    # 
    #node.override_parameter("-Dorg.cougaar.message.transport.aspects", "org.cougaar.core.mts.MessageProtectionAspect")
    #node.override_parameter("-Dorg.cougaar.message.transport.aspects", "org.cougaar.core.mts.StatisticsAspect")
    
    # Enable user authentication over HTTP (or HTTPS)
    # The authentication requirements and access control parameters are specified
    # in the $CIP/configs/security/BootPolicy.ldm.xml file.
    node.override_parameter("-Dorg.cougaar.lib.web.tomcat.enableAuth", "true")
    
    # Role to take when making LDAP requests
    # This parameter is used in the cryptoPolicy.xml file.
    node.override_parameter("-Dorg.cougaar.security.role", "#{user}")
    
    # The bootstrapper class
    # This replaces the standard (non-secure bootstrapper) with the secure bootstrapper.
    # The secure bootstrapper adds a Java security manager and an authenticated class loader.
    node.override_parameter("-Dorg.cougaar.bootstrap.class", "org.cougaar.core.security.securebootstrap.SecureBootstrapper")
    
    # The java.security.policy property defines the name of the Java policy file,
    # which is used by the Security Manager.
    # Warning!!! Use JAR files ONLY when using this policy file.
    # If directories containing .class files are included in the CLASSPATH,
    # the .class files will not have sufficient privileges to be executed.
    node.override_parameter("-Djava.security.policy", "#{cip}/configs/security/Cougaar_Java.policy")
    
    # Use Java security manager
    node.override_parameter("-Dorg.cougaar.core.security.useSecurityManager", "true")
    
    # This property specifies whether to use the authenticated class loader or
    # the legacy class loader
    node.override_parameter("-Dorg.cougaar.core.security.useAuthenticatedLoader", "true")
    
    # This property is used to set the interval (in seconds) at which CRLs are checked
    node.override_parameter("-Dorg.cougaar.core.security.crypto.crlpoll", "600")
    
    # Intervals at which validity is checked
    node.override_parameter("-Dorg.cougaar.core.security.crypto.validitypoll", "600")
        
    # for unzip & run
    # indicates unzip & run
    node.override_parameter("-Dorg.cougaar.core.autoconfig", "true")
    node.override_parameter("-Dorg.cougaar.core.security.configpoll", "5000")
    
    # In the future, we need to store the name of the domain manager
    # in a configuration file.
    # KAoS required parameter.
    #node.override_parameter("-Dorg.cougaar.core.security.Domain", "NCADomain")
    
    # indicate the name of the cryptoPolicy.xml file
    #node.override_parameter("-Dorg.cougaar.security.crypto.config", "cryptoPolicy.xml")
    
    # ########################################################
    # DEBUG properties [probably not used anymore because we are using log4j]
    #
    
    # The java.security.debug property can be used to debug the
    # Security Manager.
    # Acceptable values: all, access, jar, policy, scl, stack, domain, failure
    #node.override_parameter("-Djava.security.debug", "all")
    
    # Used to show bootstrapper debugging information
    # In particular, it will show information about the JAR file signature
    # verification process.
    # Acceptable values: true, shout, false
    #node.override_parameter("-Dorg.cougaar.bootstrap.Bootstrapper.loud" ,"false")
    #node.override_parameter("-Dorg.cougaar.core.security.bootstrapper.policydebug", "all")
    
    #node_override_parameter("-Dorg.cougaar.core.security.policy.debug", "true")
    
    # Enable Jaas trace debugging
    #node.override_parameter("-Dorg.cougaar.core.security.jaasDebug", "true")
    
    # Print crypto-related debug information about the security aspect
    #node.override_parameter("-Dorg.cougaar.core.security.crypto.debug", "true")
    #node.override_parameter("-Dorg.cougaar.core.security.crypto.dumpMesages", "true")
    
    # Print transport-related debug information about the security aspect
    #node.override_parameter("-Dorg.cougaar.message.transport.debug", "security")
    
    #node.override_parameter("-Dorg.cougaar.core.cluster.persistence.debug", "true")
    
    #node.override_parameter("-Dorg.cougaar.core.util.ConfigFinder.verbose", "true")
    
    # Enable the following properties for JSWAT debugging:
    #java.Xdebug
    #java.Xnoagent
    #java.Djava.compiler=NONE
    #java.Xrunjdwp:transport=dt_socket,server=y,address=9999
    
    # END DEBUG properties
    # ########################################################
    
    #node.override_parameter("-Dclass9.max.parts", "5")
    
    # setting "cmr" domain
    #node.override_parameter("-Dorg.cougaar.domain.cmr", "org.cougaar.core.security.monitoring.blackboard.CmrDomain")
    
    # daml settings
    #node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.servlet.useDaml", "true") 
    #node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.crypto.useDaml", "true") 
    #node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.access.useDaml", "true") 
  end
end
