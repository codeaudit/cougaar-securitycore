#!/usr/bin/ruby
####################################################
# Rule to insert JaasAgentBinder

plugin = "org.cougaar.core.security.naming.servlet.NameServerCertificateComponent"
servletComp = "org.cougaar.core.security.certauthority.CaServletComponent"
servlet = "org.cougaar.core.security.naming.servlet.NameServerCertificateServlet"
uri = "NameServerCertificateServlet"

sslRMILinkProtocol = "org.cougaar.mts.std.SSLRMILinkProtocol"
protocolInsertion = "Node.AgentManager.Agent.MessageTransport.Component"


# It is possible to remove the NameServerCertificateComponent from
# nodes when their name.server property utilizes the RMI/SSL protocol.
# 
# This is because when a node's RMI bootstrap code (in core not mtsstd)
# goes to the RMI registry it uses an unathenticated SSL port.  A side
# effect of this process is that trust manager checks and installs
# the certificate for the rmi registry server.  This certificate
# enables the node to use MTS to contact the name server and install
# its entries.
#
# I think that it is safer to simply always install the
# NameServerCertificateComponent as an essential part of the
# certificate authority.


# add NameServerCeritificateComponent to each node
  society.each_node do |node|
    node.add_component do |c|
      c.classname = plugin
      c.add_argument(uri)
    end
  end

  society.each_agent() do |agent|
    # Is this a CA agent?
    agent.each_facet do |facet|
      if (facet[:role] == $facetRootCaManagerAgent ||
          facet[:role] == $facetRedundantRootCaManagerAgent ||
          facet[:role] == $facetCaManagerAgent ||
          facet[:role] == $facetRedundantCaManagerAgent) then
        agent.add_component do |c|
          c.classname = servletComp
          c.add_argument(servlet)
          c.add_argument("/CA/" + uri)
        end
      end
    end
  end


