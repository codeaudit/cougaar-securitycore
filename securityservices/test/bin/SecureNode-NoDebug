#!/bin/csh -f

# Environment variables
# COUGAAR_INSTALL_PATH = the head of the alp install.
# COUGAAR3RDPARTY = a directory containing 3rd party jar files
#
# COUGAAR bootstrapping classpath will be:
#  $COUGAAR_DEV_PATH	if defined
#  $COUGAAR_INSTALL_PATH/lib/core.jar
#
# once running, jar files will be searched for in (in order):
#  -Dorg.cougaar.class.path 	like classpath
#  $CLASSPATH		(alp bootstrapping path from above)
#  $COUGAAR_INSTALL_PATH/lib/*
#  $COUGAAR_INSTALL_PATH/plugins/*
#  -Dorg.cougaar.system.path=$COUGAAR3RDPARTY
#  $COUGAAR_INSTALL_PATH/sys/*
#

if (! $?COUGAAR_USE_PERSISTENCE) then
	set usePersistence=false
else
	set usePersistence=${COUGAAR_USE_PERSISTENCE}
endif

# Setting useBootstrapper to true will enable the use of the boostrapper.
# In particular, the bootstrapper supports the Java security manager
# and the JAR file signature verifier.
set useBootstrapper=true

# Setting useJaas to true will enable the use of component
# execution using multiple subjects. This can be used by
# the security manager for accountability and dynamic
# policies. However, a bug in JDK 1.3 prevents from using
# this feature properly. The bug has been fixed in JDK 1.4
set useJaas=false

# Use of the cryptographic aspect
set useCryptoAspect=true

# Setting useGuardedNode to true will run this node as a KAoS
# guarded node.
set useGuardedNode=true

# set COUGAAR_INSTALL_PATH=/alpine/demo98
if (! $?COUGAAR3RDPARTY) then
    setenv COUGAAR3RDPARTY /opt/cougaar-jars
endif

if ( "$useBootstrapper" == "true") then
	set LIBPATHS=$COUGAAR_INSTALL_PATH/lib/bootstrapper.jar
else
	set LIBPATHS=$COUGAAR_INSTALL_PATH/lib/core.jar:$COUGAAR_INSTALL_PATH/lib/bootstrapper.jar
endif

if ($?COUGAAR_DEV_PATH) then
    set LIBPATHS = "${COUGAAR_DEV_PATH}:$LIBPATHS"
endif

# domains are now usually defined by the config file LDMDomains.ini.
# But you may still use properties if you wish.
#set MYDOMAINS="-Dorg.cougaar.domain.alp=org.cougaar.domain.glm.GLMDomain"
set MYDOMAINS=""
set MYPROPERTIES="$MYDOMAINS -Dorg.cougaar.system.path=$COUGAAR3RDPARTY -Dorg.cougaar.install.path=$COUGAAR_INSTALL_PATH -Duser.timezone=GMT -Dorg.cougaar.core.cluster.startTime=08/10/2005 -Dorg.cougaar.domain.planning.ldm.lps.ComplainingLP.level=0 -Dorg.cougaar.core.cluster.SharedPlugInManager.watching=false"

if ( "$useBootstrapper" == "true") then
        # The following property defines the keystore filename. It is used by
	# the authenticated class loader (to verify that jar files have been
	# signed using trusted certificate(s), and by the security manager,
	# which reads the Java policy file and creates protection domains
	# associated with certificates.
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.bootstrap.keystore=$COUGAAR_INSTALL_PATH/configs/common/bootstrap_keystore"


	# The following property defines the logfile name of the Security Manager.
	# Use the default log file name, constructed in the code, which includes
	# the name of the node and the date when the security manager was started.
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.bootstrap.SecurityManagerLogFile=$COUGAAR_INSTALL_PATH/log/bootstrap/SecurityManager.log"

	# The java.security.policy property defines the name of the Java policy file,
	# which is used by the Security Manager.
	# Warning!!! Use JAR files ONLY when using this policy file.
	# If directories containing .class files are included in the CLASSPATH,
	# the .class files will not have sufficient privileges to be executed.
	set MYPROPERTIES="$MYPROPERTIES -Djava.security.policy=$COUGAAR_INSTALL_PATH/configs/common/Cougaar_Java.policy"

	# Use this policy file instead to disable all Security Manager access
	# control checks.
	#set MYPROPERTIES="$MYPROPERTIES -Djava.security.policy=$COUGAAR_INSTALL_PATH/configs/common/Cougaar_AllPermission.policy"

	# The java.security.manager property defines the name of the
	# security manager. This is deprecated. Use the useSecurityManager
	# property instead.
	#set MYPROPERTIES="$MYPROPERTIES -Djava.security.manager=org.cougaar.core.security.bootstrap.CougaarSecurityManager"

	# The following property can be set to false to disable the security Manager
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.useSecurityManager=true"

	# The java.security.debug property can be used to debug the
	# Security Manager.
	# Acceptable values: all, access, jar, policy, scl, stack, domain, failure
	#set MYPROPERTIES="$MYPROPERTIES -Djava.security.debug=all"

	# Used to show bootstrapper debugging information
	# In particular, it will show information about the JAR file signature
	# verification process.
	# Acceptable values: true, shout, false
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.bootstrapper.loud=true"
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.bootstrapper.policydebug=all"
	
	# This property specifies whether to use the authenticated class loader or
	# the legacy class loader.
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.useAuthenticatedLoader=true"

	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.policy.debug=true"

else
	#
	# No bootstrapper
	#
    	# The following property can be set to false to disable the security Manager
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.useSecurityManager=false"

	# This property specifies whether to use the authenticated class loader or
	# the legacy class loader. Use legacy class loader
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.useAuthenticatedLoader=false"

        #see debugging info for the bootstrapper
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.society.bootstrapper.loud=shout"

        #this property has to be set so that Node.launch() rather than Bootstrapper.launch() is used to launch the society
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.useBootstrapper=false"
endif

if ( "$useJaas" == "true") then
	# Enable/disable use of component execution using multiple subjects.
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.useJaas=true"
	# Enable Jaas trace debugging
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.jaasDebug=true"
endif
if ( "$useCryptoAspect" == "true") then
	# Fully-qualified class name of the security aspect
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.message.transport.aspects=org.cougaar.core.security.crypto.SecurityAspect"
	# Print transport-related debug information about the security aspect
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.message.transport.debug=security"

	# Name of configuration file for cryptographic service provider
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.security.crypto.config=cryptoPolicy.xml"

	# Print crypto-related debug information about the security aspect
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.security.crypto.debug=true"

	# Role to take when making LDAP requests
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.security.role=srosset"

endif

if ( "$useGuardedNode" == "true") then
	# In the future, we need to store the name of the domain manager in a configuration
	# file.
	# org.cougaar.domain.manager: Name of the agent where the domain Manager is running
	# domainName:                 The name of the domain. Right now, should be the same
	# as org.cougaar.domain.manager.
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.domain.manager=$domainManagerId"
	#set MYPROPERTIES="$MYPROPERTIES -DdomainName=$domainName"
endif

if ( "$usePersistence" == "true") then
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.cluster.persistence.enable=true"
	#set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.cluster.persistence.debug=true"
	set MYPROPERTIES="$MYPROPERTIES -Dorg.cougaar.core.cluster.persistence.lazy=false"
endif

if ($?COUGAAR_MYPROP) then
    set MYPROPERTIES="$MYPROPERTIES $COUGAAR_MYPROP"
endif

set MYMEMORY=""

set node = $argv[1]
set rest="$argv[2-]"
if ( "$node" == "" ) then
  set node="Clusters"
endif

if ( "$node" == "admin" ) then
    set args="-c -r -n Administrator -p 8000 $rest"
    set MYMEMORY="-Djava.compiler=NONE"
else 
    set args="-n $node -c $rest"
    # arguments to adjust (defaults are given)
    # -Xmx64m	      # max java heap
    # -Xms3m	      # min (initial) java heap
    # -Xmaxf0.6       # max heap free percent
    # -Xminf0.35      # min heap free percent
    # -Xmaxe4m        # max heap expansion increment
    # -Xmine1m	      # min heap expansion increment
    # -Xoss400k       # per-thread *java* stack size
    set MYMEMORY="-Xmx768m -Xms64m -Xmaxf0.9 -Xminf0.1 -Xoss128k"
    #set MYMEMORY="-Xmx300m -Xms100m"
endif

set osargs=""
set os=`uname`
if ("$os" == "Linux") then
    # No green threads in jdk 1.3.1
    # set osargs="-green"
    # set some system runtime limits
    limit stacksize 16m    #up from 8m
    limit coredumpsize 0   #down from 1g
    #turn this on to enable inprise JIT
    #setenv JAVA_COMPILER javacomp
endif

#set javaargs="$osargs $MYPROPERTIES $MYMEMORY -classpath $LIBPATHS -Dorg.cougaar.message.transport.debug=true"
set javaargs="$osargs $MYPROPERTIES $MYMEMORY -classpath $LIBPATHS"
set javaargs="$javaargs -Xbootclasspath/a:$COUGAAR_INSTALL_PATH/sys/jaas.jar"

#set javaargs="$osargs $MYPROPERTIES $MYMEMORY -classpath $LIBPATHS -Dorg.cougaar.message.isLogging=true -Djava.rmi.server.logCalls=true -Dsun.rmi.server.exceptionTrace=true -Dsun.rmi.transport.tcp.readTimeout=150000 "
#set javaargs="$osargs $MYPROPERTIES $MYMEMORY -classpath $LIBPATHS -Dorg.cougaar.nameserver.verbosity=20"

if ( "$usePersistence" == "true") then
    set javaargs="-Xbootclasspath/p:$COUGAAR_INSTALL_PATH/lib/javaiopatch.jar $javaargs"
endif

if ($?COUGAAR_DEV_PATH) then
    echo java $javaargs org.cougaar.core.society.Node $args
endif


# exec instead of eval
if ( "$useBootstrapper" == "true") then
	#exec java $javaargs org.cougaar.core.security.bootstrap.Bootstrapper org.cougaar.core.society.Node $args
	exec java $javaargs org.cougaar.core.security.securebootstrap.Bootstrapper org.cougaar.core.society.Node $args
else
	exec java $javaargs org.cougaar.core.society.Node $args
endif
