# 
# <copyright> 
#  Copyright 1999-2004 Cougaar Software, Inc.
#  under sponsorship of the Defense Advanced Research Projects 
#  Agency (DARPA). 
#  
#  You can redistribute this software and/or modify it under the
#  terms of the Cougaar Open Source License as published on the
#  Cougaar Open Source Website (www.cougaar.org).  
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
# </copyright> 
# 

# Set this if you require remote X display.
# If you don't know what this is, you don't need it.
display = nil # eg "localhost"

# This is the org.cougaar.name.server value
# NOTE: this should use the host of the Root CA for unzip and run
# this value is used if an alpreg.ini does not exist
namesrv = nil # eg "lemon:8888:5555"

# used to obtain environment variables
require 'Env'

user = ENV["USER"]
if (user == nil)
  user = "asmt"
  print "defaulting to user to #{user}\n"
end

# http port to access cougaar node
httpport = 8800
# https port to access cougaar node
httpsport = 9800
  
#print "cip = #{cip}\n"
#print "cws = #{cws}\n"

society.each_host do |host|
  # the host
  hostname = host.host_name
  host.each_node do |node|
  
    # Default to localhost popups, which also requires that localhost
    #   have "xhost +localhost" for local X authorization.
    # 
    if (display)
      node.remove_env_parameter("DISPLAY")
      node.add_env_parameter("DISPLAY=#{display}:0.0")
    #else 
    #  node.remove_env_parameter("DISPLAY")
    end
    
    if (namesrv)
      node.override_parameter("-Dorg.cougaar.name.server", "#{namesrv}")
    #else
    #  node.remove_parameter("-Dorg.cougaar.name.server")
    end

   # The following are the two flags that will enable the CommunityServiceUtil to:
   # 1) ignore the method invocations (don't invoke CS, just return w/o response) 
   #    org.cougaar.core.security.csutil.ignoreCall=[true|false]
   # 
   # 2) ignore CS response (invoke CS, but ignore the response) 
   #    org.cougaar.core.security.csutil.ignoreResponse=[true|false]
   #
   # NOTE: if both values are false or not set, then the CommunityServiceUtil will behave as normal.
   # 
   # node.override_parameter("-Dorg.cougaar.core.security.csutil.ignoreCall","true")
   # node.override_parameter("-Dorg.cougaar.core.security.csutil.ignoreResponse","true")

    # Change the timeouts for white pages
      node.override_parameter("-Dorg.cougaar.core.wp.server.expireTTD","480000")
      node.override_parameter("-Dorg.cougaar.core.wp.server.successTTD","90000")
      node.override_parameter("-Dorg.cougaar.core.wp.server.failTTD","30000")

    # ACME rule for setting security services parameters
    # 
    # Edit the classpath, install-path and config-path to reflect your 
    #   local installation.  See "java.util.Properties" for syntax details.
    #
    # ACME will add some properties to this list, such as the 
    #   "org.cougaar.node.name=..", but otherwise this is the *complete*
    #   list of properties.
    #
    # Note that some symbols, such as ";", must be encoded ("\;")
    
    # Set the Cougaar install path.
    #currentCip = node.remove_parameter("-Dorg.cougaar.install.path")
    #if (currentCip == nil)
    #  node.override_parameter("-Dorg.cougaar.install.path", "#{cip}")
    #else
    #  node.add_parameter("-Dorg.cougaar.install.path", "#{currentCip}")
    #end
    
    # Set the Config Finder class
    #node.add_parameter("-Dorg.cougaar.util.ConfigFinder.ClassName", "org.cougaar.core.security.config.SecureConfigFinder")
    #node.override_parameter("-Dlog4j.configuration", "loggingConfigStatic.conf")
    
    # Set the cougaar system path, which is used to find third-party jars
    #   (e.g. "log4j.jar").
    #
    # This defaults to "{org.cougaar.install.path} + /sys", but one can
    #   use a different directory by setting this property.
     # node.override_parameter("-Dorg.cougaar.system.path", "#{cip}/sys")
    
    # Enable or disable persistence.
    #
    node.override_parameter("-Dorg.cougaar.core.persistence.clear", "false")
    node.override_parameter("-Dorg.cougaar.core.persistence.enable", "true")

    # Interval (in milliseconds) between persistence snapshots
    #node.override_parameter("-Dorg.cougaar.core.persistence.lazyInterval", "3600000")
    #
 
    # Add the "java-io-patch" to allow Cougaar persistence.
    #
    # If persistence is disabled then this has no effect.  For simplicity
    # this "java-io-patch" jar should always be included.  Since this jar
    # overrides "java.io" it must be prepended to the JVM's bootclasspath.
    #node.remove_parameter("-Xbootclasspath/p")
    #node.add_parameter("-Xbootclasspath/p:#{cip}#{File::SEPARATOR}lib#{File::SEPARATOR}javaiopatch.jar")
    
    # Set the class path for starting the Node, which uses ":" separators.
    #
    # Typically only bootstrap.jar needs to be in here.
    # java.class.path=/mnt/shared/integ/lib/bootstrap.jar
    # However, the Jython interpreter requires the JAR files
    # referenced from Python be on the "real" classpath.
    node.override_parameter("-Djava.class.path", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}CougaarCRLextensions.jar")
        
    # Set the config path, which uses ";" separators.
    #
    # Note that this must end with an (escaped) semi-colon to indicate
    # that the path specified here should in addition to the default
    # search path.
    #
    # This path must contain your "cougaar.rc", database files ("*.q"), 
    #   "default.psps.xml", and other configuration files.
    #
    # Here we override the default configuration path to include both
    # the "common" directory and "GLMTrans" directory.
    #node.override_parameter("-Dorg.cougaar.config.path", "\"#{cip}#{File::SEPARATOR}configs#{File::SEPARATOR}common\;#{cip}#{File::SEPARATOR}configs#{File::SEPARATOR}glmtrans\;\"")
    #node.override_parameter("-Dorg.cougaar.config.path", "\".;$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security;$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}common;$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}glmtrans;$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}daml\"")
    node.prepend_value_on_parameter("-Dorg.cougaar.config.path", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security")
    node.append_value_on_parameter("-Dorg.cougaar.config.path", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}daml")
    node.append_value_on_parameter("-Dorg.cougaar.config.path", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}core#{File::SEPARATOR}configs#{File::SEPARATOR}common")
    #node.append_value_on_parameter("-Dorg.cougaar.config.path", "#{File::SEPARATOR}tmp")

    #node.override_parameter("-Dorg.cougaar.config.path", "\".;#{cip}#{File::SEPARATOR}configs#{File::SEPARATOR}security\;\"")
    
    # Some standard memory settings.
    #
    # These are not usually modified.
    # Modified for CSI use
    #java.Xms448m
    #node.remove_parameter("-Xms")
    #node.add_parameter("-Xms512m")
    #node.remove_parameter("-Xmx")
    #node.add_parameter("-Xmx1024m")
    #node.add_parameter("-XX:ThreadStackSize=256")
    
    # Set some standard COUGAAR properties.
    #node.override_parameter("-Djava.rmi.server.hostname", "#{hostname}")
    
    ########################################################################
    # A couple properties fir the kaos domain manager
    ########################################################################
    #node.override_parameter("-Dorg.cougaar.core.security.Domain", "TestDomain")
    #node.override_parameter("-Dorg.cougaar.safe.domainName", "TestDomain")
    node.override_parameter("-Dsafe.guard.NodeGuard.createPolicies", "false")
    
    
    ########################################################################
    # CSI Security services
    ########################################################################
   
    # Secure Config Finder 
    #
    node.override_parameter("-Dorg.cougaar.util.ConfigFinder.ClassName", "org.cougaar.core.security.config.jar.SecureConfigFinder")

    # Naming service over SSL.
    # True to enable naming service over SSL.
    # The certificates need to be createdd first before this feature is turned on.
    #
    node.override_parameter("-Dorg.cougaar.core.naming.useSSL", "true")

    #node.override_parameter("-Djavax.xml.parsers.SAXParserFactory", "org.apache.xerces.jaxp.SAXParserFactoryImpl")

    # system properties to timeout white pages "/$" lookups:
    node.override_parameter("-Dorg.cougaar.lib.web.list.timeout", "5000")
    # system properties to timeout white pages "/agents" listing lookups:
    node.override_parameter("-Dorg.cougaar.lib.web.redirect.timeout", "5000")
   
    # MTS RMI over SSL
    # The certificates need to be created first before this feature is turned on.
    #
# this is installed in a different rule now
#    node.override_parameter("-Dorg.cougaar.message.protocol.classes", "org.cougaar.mts.std.SSLRMILinkProtocol")
    
    # You can also turn on/off http/s. Turn of by setting the port to -1
    # Note that HTTPS is off by default, and HTTP is at 8800
    # HTTP port number
    foundHttp = false
    foundHttpPort = -1
    node.each_parameter { |param|
      if param =~ /^-Dorg.cougaar.lib.web.http.port=.+/
        foundHttp = true
        foundHttpPort = param.split('=')[1]
        break
      end
    }
    if (!foundHttp)
      node.override_parameter("-Dorg.cougaar.lib.web.http.port", "#{httpport}")
    else
      httpsport = foundHttpPort.to_i + 1000
    end
    
    # HTTPS port number
    # Comment out the following two lines if you don't want HTTPS
    # The certificates need to be createdd first before this feature is turned on.
    node.override_parameter("-Dorg.cougaar.lib.web.https.port", "#{httpsport}")
    node.override_parameter("-Dorg.cougaar.lib.web.https.factory", "org.cougaar.core.security.ssl.WebtomcatSSLServerFactory")
    
    # Cougaar workspace
    #node.override_parameter("-Dorg.cougaar.workspace", "#{cws}")
    node.override_parameter("-Djava.io.tmpdir", "$COUGAAR_INSTALL_PATH/workspace")
    
    # Log4j Logging
    #node.override_parameter("-Dorg.cougaar.core.logging.config.filename", "loggingConfig.conf")
    #node.override_parameter("-Dorg.cougaar.core.logging.log4j.appender.SECURITY.File", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}workspace#{File::SEPARATOR}log4jlogs#{File::SEPARATOR}#{node.name}.log")
    #node.override_parameter("-Dorg.cougaar.core.logging.log4j.appender.A1.File", "log4jnode.log")
    
    
    # Aspects: MessageProtectionAspect
    # Add the MessageProtectionAspect to the org.cougaar.message.transport.aspects property to turn on
    # the Message Protection Service (inter-agent message protection mechanism).
    # 
    #node.override_parameter("-Dorg.cougaar.message.transport.aspects", "org.cougaar.mts.std.MessageProtectionAspect")
    #node.override_parameter("-Dorg.cougaar.message.transport.aspects", "org.cougaar.mts.std.StatisticsAspect")
    
    # Enable user authentication over HTTP (or HTTPS)
    # The authentication requirements and access control parameters are specified
    # in the $CIP/configs/security/BootPolicy.ldm.xml file.
    node.override_parameter("-Dorg.cougaar.lib.web.tomcat.enableAuth", "true")

    # Enable audit service for http requests
    # The audit service logs a record every time a user accesses a servlet.
    # The org.cougaar.lib.web.tomcat.enableAuth must be set to true.
    node.override_parameter("-Dorg.cougaar.core.security.audit", "true")
    
    # Role to take when making LDAP requests
    # This parameter is used in the cryptoPolicy.xml file.
    node.override_parameter("-Dorg.cougaar.security.role", "#{user}")
    
    # This property is used to set the interval (in seconds) at which CRLs are checked
    node.override_parameter("-Dorg.cougaar.core.security.crypto.crlpoll", "600")
    
    # Intervals at which validity is checked
    node.override_parameter("-Dorg.cougaar.core.security.crypto.validitypoll", "600")
    
    # turn data protection on
    node.override_parameter("-Dorg.cougaar.core.security.dataprotection", "true")
    
    # for unzip & run
    # indicates unzip & run
    node.override_parameter("-Dorg.cougaar.core.autoconfig", "true")
    node.override_parameter("-Dorg.cougaar.core.security.configpoll", "5000")

    # for coordinator 
    node.override_parameter("-Dorg.cougaar.core.security.coordinatorOn", "true")

    # In the future, we need to store the name of the domain manager
    # in a configuration file.
    # KAoS required parameter.
    #node.override_parameter("-Dorg.cougaar.core.security.Domain", "NCADomain")
    
    # indicate the name of the cryptoPolicy.xml file
    #node.override_parameter("-Dorg.cougaar.security.crypto.config", "cryptoPolicy.xml")
    
    # ########################################################
    # DEBUG properties [probably not used anymore because we are using log4j]
    #
    
    #node_override_parameter("-Dorg.cougaar.core.security.policy.debug", "true")
    
    # Enable Jaas trace debugging
    #node.override_parameter("-Dorg.cougaar.core.security.jaasDebug", "true")
    
    # Print crypto-related debug information about the security aspect
    #node.override_parameter("-Dorg.cougaar.core.security.crypto.debug", "true")
    #node.override_parameter("-Dorg.cougaar.core.security.crypto.dumpMesages", "true")
    
    # Print transport-related debug information about the security aspect
    #node.override_parameter("-Dorg.cougaar.message.transport.debug", "security")
    
    #node.override_parameter("-Dorg.cougaar.core.cluster.persistence.debug", "true")
    
    #node.override_parameter("-Dorg.cougaar.core.util.ConfigFinder.verbose", "true")
    
   
    # SSL debug
    # The property value must include the string "ssl" followed by one or more of the following modifiers:
    # record -- enable per-record tracing
    #  The "record" modifier can be further modified by:
    #    *  plaintext -- print hex dump of record plaintext 
    # handshake -- print each handshake message
    #  The "handshake" modifier can be further modified by one or more of
    #  the following:
    #    * data -- print hex dump of each handshake message
    #    * verbose -- verbose handshake message printing 
    # keygen -- print key generation data
    # session -- print session activity
    # defaultctx -- print default SSL initialization
    # sslctx -- print SSLContext tracing
    # sessioncache -- print session cache tracing
    # keymanager -- print key manager tracing
    # trustmanager -- print trust manager tracing 
    # The special value "all" is equivalent to setting all of the above modifiers
    #node.override_parameter("-Djavax.net.debug", "ssl,record,handshake,keygen,session,verbose")
 
    # END DEBUG properties
    # ########################################################
    
    #node.override_parameter("-Dclass9.max.parts", "5")
    
    # setting "cmr" domain
    #node.override_parameter("-Dorg.cougaar.domain.cmr", "org.cougaar.core.security.monitoring.blackboard.CmrDomain")
   
    # thread max count 
    #node.override_parameter("-Dorg.cougaar.thread.running.max", "200")
    # FOR DEBUGGING ONLY!
    # for blackboard authorization debug (currently only used for print out warning if query is
    # denied for a unary predicate that returns true for a SecuredObject
    node.override_parameter("-Dorg.cougaar.core.security.auth.debug", "true") 

    # daml settings
    node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.servlet.useDaml", "true") 
    node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.crypto.useDaml", "true") 
    node.override_parameter("-Dorg.cougaar.core.security.policy.enforcers.access.useDaml", "true") 
    node.override_parameter("-Dorg.cougaar.core.security.policy.auth.role.useDaml", "true")
    node.override_parameter("-Dorg.cougaar.core.security.policy.auth.role.useAccessCaching", "true")
    node.override_parameter("-Dkaos.policy.guard.QuickMediation", "true")
  end
end

society.each_node do |node|
 node.each_facet(:role) do |facet|
  # We need to specify the HTTP and HTTPS port number for
  # every CA (root and subordinate CAs). This is useful when
  # more than one node is running on a host, otherwise Tomcat
  # would select a dynamically allocated port number.
  #
  # should move the rundant stuff out to another rule
   if facet[:role] == $facetCaManagerAgent \
   or facet[:role] == 'RedundantCertificateAuthority' 

    httpport = 8810
    httpsport = 9810
    if facet[:role] == 'RedundantCertificateAuthority'
      httpport = 8840
      httpsport = 9840
    end

    # node.override_parameter("-Dorg.cougaar.core.logging.log4j.appender.SECURITY.File","$COUGAAR_INSTALL_PATH#{File::SEPARATOR}workspace#{File::SEPARATOR}log4jlogs#{File::SEPARATOR}${HOSTNAME}-ca.log")

    # You can also turn on/off http/s. Turn of by setting the port to -1
    # Note that HTTPS is off by default, and HTTP is at 8800
    # HTTP port number
    node.override_parameter("-Dorg.cougaar.lib.web.http.port", "#{httpport}")
    
    # HTTPS port number
    # Comment out the following two lines if you don't want HTTPS
    # The certificates need to be createdd first before this feature is turned on.
    node.override_parameter("-Dorg.cougaar.lib.web.https.port", "#{httpsport}")
  end

  if facet[:role] == 'RootCertificateAuthority' \
    or facet[:role] == 'RedundantRootCertificateAuthority' 
    httpport = 8820
    httpsport = 9820
    if facet[:role] == 'RedundantRootCertificateAuthority' 
      httpport = 8830 
      httpsport = 9830 
    end
    
    node.override_parameter("-Dorg.cougaar.lib.web.http.port", "#{httpport}")
    node.override_parameter("-Dorg.cougaar.lib.web.https.port", "#{httpsport}")
  end

   if facet[:role] == 'jswat' \
     # Enable the following properties for JSWAT debugging:
     node.override_parameter("-Djava.compiler", "NONE")
     node.add_parameter("-Xdebug")
     node.add_parameter("-Xnoagent")
     # transport=dt_socket: use socket to send debug commands and data
     # transport=dt_shmem:  use shared memory to send debug commands and data
     # address=xxxx:        listen on port xxxx
     # suspend=y:           Suspend the VM at startup
     node.add_parameter("-Xrunjdwp:transport=dt_socket,server=y,address=9999,suspend=y")
   end

   if facet[:role] == 'hprof' \
     # hprof profiling
     node.add_parameter("-Xrunhprof:heap=all,thread=y,depth=8")
   end

   if facet[:role] == 'optimizeIt' \
     # OptimizeIt profiling
     # 1) Install OptimizeIt on Unix
     # 2) Set your LD_LIBRARY_PATH to include the Optimizeit lib directory:
     #     export LD_LIBRARY_PATH=<OptItDir>/lib:$LD_LIBRARY_PATH
     # 3) Set your CLASSPATH to include the Optimizeit optit.jar file: 
     #     export CLASSPATH=<OptItDir>/lib/optit.jar:$CLASSPATH
     # 4) Add -Xrunpri:startAudit=t
     # Put oibcp.jar and optit.jar under $CIP/sys
     node.replace_parameter(/-Xbootclasspath\/a/, "-Xbootclasspath/a:$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}secure_bootstrapper.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}bootstrap.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}sys#{File::SEPARATOR}oibcp.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}sys#{File::SEPARATOR}optit.jar")
     # Memory profiler enabled:
     #node.add_parameter("-Xrunpri:startAudit=t,port=1470,pause=t,filter=$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security#{File::SEPARATOR}cougaarOptimizeIt.oif")
     # Memory profiler disabled:
     node.add_parameter("-Xrunpri:dmp=1,startAudit=t,port=1470,pause=t,filter=$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security#{File::SEPARATOR}cougaarOptimizeIt.oif")
   end

   if facet[:role] == 'ejp' \
     # EJP profiling
     # 1) Download ejp-tracer and ejp-presenter
     # 2) Unzip ejp-tracer
     # 3) Create the libtracer.so library
     #       cd tracer/gen ; gmake -f linux.mk all
     # 4) Set your LD_LIBRARY_PATH to include the EJP lib directory:
     #     export LD_LIBRARY_PATH=<ejpDir>/lib:$LD_LIBRARY_PATH
     # 5) Copy tracerapi.jar to $CIP/sys
     # 6) Copy <ejpDir>/bin/filter.cfg to your home directory
     # 6) Add -Xruntracer
     node.add_parameter("-Xruntracer:enabled=true")
     node.override_parameter("-Djava.class.path", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}CougaarCRLextensions.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}sys#{File::SEPARATOR}tracerapi.jar")
   end

   if facet[:role] == 'jprofiler'
     node.add_parameter("-Xmixed")
     node.add_parameter("-Xrunjprofiler:port=8849")
     node.replace_parameter(/-Xbootclasspath\/a/, "-Xbootclasspath/a:$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}secure_bootstrapper.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}bootstrap.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}sys#{File::SEPARATOR}agent.jar")
   end
 end
end

