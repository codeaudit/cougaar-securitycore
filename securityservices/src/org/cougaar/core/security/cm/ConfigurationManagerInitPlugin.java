/*
 * <copyright>
 *  Copyright 1997-2003 Cougaar Software, Inc.
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 *
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED "AS IS" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 *
 * </copyright>
 *
 * CHANGE RECORD
 * -
 */



package org.cougaar.core.security.cm;


import org.cougaar.core.plugin.ComponentPlugin;
import org.cougaar.core.service.LoggingService;
import org.cougaar.core.service.UIDService;
import org.cougaar.util.UnaryPredicate;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;


/**
 * Creates the SocietyConfiguration representation for time t0. 
 * 	The Society Confiration is constructed from the plugin parameters
 *  passed in to it.  These parameters are generated by the 
 *  configuration_manager.rule which extracts the "role" facet from
 * 	each node and if it has Management role then adds as a plugin
 *  parameters.  If an agent contains the "cm_role" facet then the
 * 	agent is added to the parameters of this plugin.
 * @author ttschampel
 */
public class ConfigurationManagerInitPlugin extends ComponentPlugin {
  //Plugin Constants
  private static final String PLUGIN_NAME = "ConfigurationManagerInitPlugin";
  /** Logging Service */
  private LoggingService logger = null;
  /** UIDService */
  private UIDService uidService = null;
  HashMap agentMap = new HashMap();
  HashMap nodeMap = new HashMap();
  /** Society Configuration Value object */
  private SocietyConfiguration societyConfiguration;
  /** Predicate for SocietyConfiguration */
  private UnaryPredicate societyConfigurationPredicate = new UnaryPredicate() {
      public boolean execute(Object o) {
        return o instanceof SocietyConfiguration;
      }
    };

  /**
   * Setup the Logging Service
   *
   * @param service LoggingService
   */
  public void setLoggingService(LoggingService service) {
    this.logger = service;
  }


  /**
   * Set UIDService
   *
   * @param service UIDService
   */
  public void setUIDService(UIDService service) {
    this.uidService = service;
  }


  /**
   * Component Load method
   */
  public void load() {
    super.load();
    //get parameters
    Collection parameters = getParameters();
    if (parameters.size() > 0) {
      Iterator iterator = parameters.iterator();

      while (iterator.hasNext()) {
        String parameter = (String) iterator.next();
        String type = parameter.substring(0, parameter.indexOf(","));
        String parameterName = parameter.substring(parameter.indexOf(",") + 1,
            parameter.indexOf("="));
        String parameterType = parameter.substring(parameter.indexOf("=") + 1,
            parameter.length());

        if (type.equals("node")) {
          NodeConfiguration nc = new NodeConfiguration(parameterName,
              parameterType);
          nodeMap.put(parameterName, nc);

        } else if (type.equals("agent")) {
          AgentConfiguration ac = new AgentConfiguration(parameterName,
              parameterType);
          agentMap.put(parameterName, ac);
        }
      }

      societyConfiguration = new SocietyConfiguration(agentMap, nodeMap);
      if(logger.isDebugEnabled()){
      	logger.debug("Configurations:" + societyConfiguration);
      }
    } else {
      if (logger.isErrorEnabled()) {
        logger.error("No Configuration Manager parameters inputted");
      }
    }
  }


  /**
   * Setup subscriptions (none) and get t0 society configuration
   */
  public void setupSubscriptions() {
    if (logger.isDebugEnabled()) {
      logger.debug(PLUGIN_NAME + " setupSubscriptions()");
    }

    if (getBlackboardService().didRehydrate()) {
      //get society configuration from blackboard
      if (logger.isDebugEnabled()) {
        logger.debug("Getting Society configuration from blackboard");

      }

      Collection coll = getBlackboardService().query(societyConfigurationPredicate);
      Iterator iter = coll.iterator();
      int index = 0;
      while (iter.hasNext()) {
        index++;
        this.societyConfiguration = (SocietyConfiguration) iter.next();
      }

      if (index == 0) {
        if (logger.isErrorEnabled()) {
          logger.error("No SocietyConfiguration on the blackboard!");
        }
      }
    } else {
      if (this.societyConfiguration != null) {
        getBlackboardService().publishAdd(this.societyConfiguration);
      }
    }
  }


  /**
   * No implmentation for now...
   */
  public void execute() {
    if (logger.isDebugEnabled()) {
      logger.debug(PLUGIN_NAME + " executing");
    }
  }
}
