:input DENY
:forward DENY
:output DENY

#You can copy this file to /etc/sysconfig/ipchains and run 
# "/etc/init.d/ipchains restart" and it will take effect

#
# Options:
# -A    - Append  one  or  more rules to the end of the selected chain.
# -p    - The  protocol of the rule or of the packet to check.
#         Can be one of tcp, udp, icmp, or all, or numeric value.
# -s    - Source  specification.
# -d    - Destination  specification.
# -j    - This specifies the target of the rule; ie. what to do if the packet matches it.
# -l    - Turn  on kernel logging of matching packets.
# -y    - Only match TCP packets with the SYN bit set and the ACK and FIN bits cleared.
#         Such packets are  used  to  request TCP  connection  initiation;
#         For  example, blocking such packets coming in an interface will prevent incoming TCP
#         connections, but outgoing TCP connections will be unaffected.
#         If the "!" flag precedes the "-y", the sense of the option is inverted.

# In the following rules, we use two sub-rules:
# 1st rule: Allow traffic into the specified port
# 2nd rule: Allow second and further packets (can't initiate connections) from the specified port

# HTTP traffic
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 http
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 http ! -y

-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 8800
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 8800 ! -y

# HTTPS traffic
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 https
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 https ! -y

-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 8443
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 8443 ! -y

# LDAP traffic
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 ldap
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 ldap ! -y

# LDAPS traffic
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 ldaps
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 ldaps ! -y

# SSH access (port 22)
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 ssh
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 ssh ! -y

-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 x11-ssh-offset
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 x11-ssh-offset ! -y

# NIS
# Need to investigate how to set this up properly.
# Port 613 (hmmp-op: HMMP Operation?) is used by ypbind
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 613
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 613 ! -y
# Port 32768 (filenet-tms: Filenet TMS?) is used by rpc.statd
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 32768
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 32768 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 32768
-A output -j ACCEPT -p udp -s 0.0.0.0/0 32768 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 32769
-A output -j ACCEPT -p udp -s 0.0.0.0/0 32769 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 799
-A output -j ACCEPT -p udp -s 0.0.0.0/0 799 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 800
-A output -j ACCEPT -p udp -s 0.0.0.0/0 800 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 818
-A output -j ACCEPT -p udp -s 0.0.0.0/0 818 ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 npmp-local
-A output -j ACCEPT -p udp -s 0.0.0.0/0 npmp-local ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 894
-A output -j ACCEPT -p udp -s 0.0.0.0/0 894 ! -y

# The portmapper is required for NFS Server and other RPC services 
# (NIS and so on).
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 sunrpc
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 sunrpc ! -y

-A input  -j ACCEPT -p udp -d 0.0.0.0/0 sunrpc
-A output -j ACCEPT -p udp -s 0.0.0.0/0 sunrpc ! -y

# RUBY
# Ruby listens on port 5300 for ...
# Ruby initiates connections to port 5222 for ...
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 5300
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 5300 ! -y

-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 5222 ! -y
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 5222

# DNS traffic
# DNS doesn't always use UDP; if the reply from the server exceeds 512 bytes,
# the client uses a TCP connection (still going to port number 53) to get the data. 
-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 dns ! -y
-A output -j ACCEPT -p tcp -s 0.0.0.0/0 dns
-A input  -j ACCEPT -p udp -d 0.0.0.0/0 dns ! -y
-A output -j ACCEPT -p udp -s 0.0.0.0/0 dns

# Local-to-local packets are OK
-A input -i lo -j ACCEPT

#
# Cougaar protocols
# Cougaar naming service. Normally not required by the Certificate Authority
#-A input  -j ACCEPT -p tcp -d 0.0.0.0/0 9800
#-A output -j ACCEPT -p tcp -s 0.0.0.0/0 9800 ! -y

#
# Log all the rejected attempts to connect.
# If you don't want to log, you can just comment the following
# lines out.
-A input   -j DENY -l
-A output  -j DENY -l
-A forward -j DENY -l

