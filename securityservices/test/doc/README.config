This README file explains how to configure the security services. Either CSMART or
.INI configuration files may be used to configure the security services.


Node configuration
==================
Every node must have the following components:
* The KAoS guard component registers itself to the policy domain manager, and receives
  the security policies from the policy domain manager. The policies are then propagated
  to the policy enforcers running on that node. It must run on every node.
* The Security component factory component is responsible for initializing and registering
  the security services. It must run on every node.
  The security component factory takes one parameter, which must be set to the name of the
  security community in which the node agent is running.
* The JAAS agent binder component executes every agent in a separate user context.
  The component must run on every node.

Sample INI configuration
------------------------
Node.AgentManager.Agent.SecurityComponent(HIGH)=safe.util.SAFESecurityComponent
Node.AgentManager.Agent.SecurityComponent(HIGH)=org.cougaar.core.security.provider.SecurityComponentFactory(Enclave-2)
Node.AgentManager.Binder = org.cougaar.core.security.access.JaasAgentBinderFactory

Recipes
-------
KAoS guard:                    IHMCSecurityComponent.sql
Security component factory:    NAISecurityComponentFactory.sql
JAAS agent binder:             NAIJaasBinder.sql

User Management Agent
=====================
The user management agent is responsible for managing users.
1) Start by reading the README.userdb file.
2) Create a user admin agent. For instance, create the "UserAdminAgent" agent.
   The user admin agent can be created using an AgentInsertionRecipe recipe.
3) Add the UserAdminServlet to the user admin agent. This can be done by creating a SpecificInsertionRecipe recipe.

Sample INI configuration
------------------------
plugin = org.cougaar.core.security.certauthority.CaServletComponent(org.cougaar.core.security.crypto.ldap.admin.UserAdminServlet, /useradmin)

Recipes
-------
User admin agent:              UserAdminAgent.sql
User admin servlet:            UserAdminServlet.sql

Society and Enclave Managers
============================
The society manager and the enclave managers have the same agent configuration.
Each enclave should have one enclave security manager agent.
Create one recipe for each enclave security manager agent. 

Sample INI configuration
------------------------
plugin=org.cougaar.core.security.monitoring.plugin.CapabilitiesProcessingPlugin
plugin=org.cougaar.core.security.monitoring.plugin.CapabilitiesConsolidationPlugin
plugin=org.cougaar.core.security.monitoring.plugin.MnRQueryReceiverPlugin
plugin=org.cougaar.core.security.monitoring.plugin.MnRQueryResponderPlugin

Monitoring & Response sensors
=============================
Sensors monitor monitor the system and generate IDMEF events when exceptional conditions occur.
For instance, a sensor may generate an IDMEF event when an intrustion has been detected.
Currently, the following events may be generated:
1) Java security manager events
2) Jar file signature failures events
3) Login failure events
4) Message protection failure events

Events of type 1) and 2) are handled by the BootStrapEventPlugin plugin.
Events of type 3) are handled by the LoginFailureSensor plugin, which takes one parameter:
Events of type 4) are handled by the MessageFailureSensor plugin, which takes one parameter:
These plugins should be included in all node agents. They should not be installed on agents
that are not node agents.

Sample INI configuration
------------------------
The NAI sensors are configured as follow:
plugin = org.cougaar.core.security.monitoring.plugin.BootStrapEventPlugin
plugin = org.cougaar.core.security.monitoring.plugin.MessageFailureSensor
plugin = org.cougaar.core.security.monitoring.plugin.LoginFailureSensor

Recipes
-------
BootStrap Event Plugin:        MnRBootStrapEventPlugin
Login Failure sensor:          MnRLoginFailureRatePlugin
Message Failure Sensor:

Monitoring & Response Data Colletors
====================================
Sensors publish IDMEF events to their local blackboard. Those events may then be collected by other agents
for further analyzis. For instance, data may be collected from various sensors to correlate the events.

Events may be collected by a variety of components:
* Adaptive filters, which collect data based on various parameters such as the threatcon level.
* EventQueryPlugin. In most cases, analyzers rely on the adaptive filters to collect the events, but
  they may also be configured to use a simple collection mechanism.
* Security Console. The security console may collect data from various sensors and display the events
  on the console.

The data collectors use the AggAgent mechanism to collect IDMEF events. Both the requestor and the sensors
need to be configured to enable AggAgent.

The AggAgent mechanism requires the RemoteSubscriptionPlugin and the AggregationPlugin
plugins on the requestor side.
The RemoteSubscriptionPlugin must be installed on every agent where a sensor is running.
Note that since sensors are generally configured to run on every node, sensors are also
installed on data collector nodes. Therefore, the data collectors have three plugins.

The EventQueryPlugin is a simple data collector component. It queries for IDMEF messages and keeps
an updated list of Sensors with the capability. All events are copied to the blackboard.
The EventQueryPlugin takes the following parameters:
Parameter 1: String - The name of the Society Security Manager.
Parameter 2: String - A UnaryPredicate class that selects the IDMEF messages.
Parameter 3: String - A class name that supports the QueryClassificationProvicer interface.
                      A single class may support both.

Sample INI configuration
------------------------
1) Requestor side
plugin = org.cougaar.lib.aggagent.plugin.AggregationPlugin
plugin = org.cougaar.lib.aggagent.plugin.AlertPlugin

Below is an example of EventQueryPlugin configuration. The plugin is configured to collect login failure
events.
plugin = org.cougaar.core.security.monitoring.plugin.EventQueryPlugin(SocietySecurityManager,org.cougaar.core.security.monitoring.plugin.AllLoginFailures)

2) Sensor side
This Plugin services remote subscription requests.  It sends data back to an aggregation 
as requested.  It depends on the presence of the AggDomain
plugin = org.cougaar.lib.aggagent.plugin.RemoteSubscriptionPlugin

Monitoring & Response Analyzers
===============================
Analyzers analyze data from various IDMEF sources. For instance, analyzers may correlate data from
multiple sensors and trigger alerts when a threshold has been reached.

The RateCalculatorPlugin has been built to compute the rate at which IDMEF from a given type have been
received. This analyzer is used to compute the login failure rate and the message failure rate.
The RateCalculatorPlugin queries for IDMEF messages and creates a condition from the results.
The arguments to the plugin component in the .ini file determine how rates are generated:
Parameter 1: Integer -  Poll interval in seconds. Determines how often the rate is recalculated.
Parameter 2: Integer -  Window for IDMEF messages to be gathered over to determine the rate.
                        The value is a duration in seconds.
Parameter 3: String  -  The IDMEF message category to examine.
Parameter 3: String  -  The name of the condition to post to the blackboard

Sample INI configuration
------------------------
plugin = org.cougaar.core.security.monitorin.plugin.RateCalculatorPlugin(20,60,org.cougaar.core.security.monitoring.LOGIN_FAILURE,org.cougaar.core.security.monitoring.LOGIN_FAILURE_RATE)

Monitoring & Response Responders
================================
Responders monitor the system and respond to intrusions. There are currently two responders.

The UserLockoutPlugin queries login failures and will lockout users who have failed to login too many times.
The values for maximum login failures and lockout duration are retrieved from Operating Modes driven by
the adaptivity engine.
The UserLockoutPlugin needs to collect data from all login failure sensors in a particular domain.
Therefore, it requires the AggAgent plugins described in the "Monitoring & Response Data Colletors" section,
as well as one data collector plugin. For instance, it may be configured to use the EventQueryPlugin.

Add these lines to your node agent:
plugin = org.cougaar.core.security.monitoring.plugin.UserLockoutPlugin(600,86400)
plugin = org.cougaar.core.security.monitoring.plugin.EventQueryPlugin(SocietySecurityManager,org.cougaar.core.security.monitoring.plugin.AllLoginFailures)
plugin = org.cougaar.lib.aggagent.plugin.AggregationPlugin
plugin = org.cougaar.lib.aggagent.plugin.AlertPlugin

Here, the number 600 is the duration to wait (in seconds) between checking
the login failures for deletion. 86400 represents the amount of time to
keep the login failures before deleting it. SocietySecurityManager is
the agent name of the society security manager.

The CertificateRevokerPlugin is responsible for revoking agent certificates when the number of message failures ge
plugin = org.cougaar.core.security.monitoring.plugin.CertificateRevokerPlugin

Certificate Authortity
======================

The following is an example configuration comprised of one root CA and four subordinate CAs.
Root CA:
--------
DN:          cn=1AD-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:  ca1ADAgent
Node name:   ca1ADNode
CSR:         http://yew:5561/$ca1ADAgent/CA/CertificateSigningRequest
LDAP:        ldap://yew:389/dc=1adCA,dc=cougaar,dc=org

Subordinate CA 1:
-----------------
DN:          cn=1AD-Enclave1-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:  ca1ADEnclave1Agent
Node name:   ca1ADEnclave1Node
CSR:         http://juniper:5561/$ca1AEnclave1DAgent/CA/CertificateSigningRequest
LDAP:        ldap://yew:389/dc=1adEnclave1CA,dc=cougaar,dc=org

Subordinate CA 2:
-----------------
DN:          cn=1AD-Enclave2-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:  ca1ADEnclave2Agent
Node name:   ca1ADEnclave2Node
CSR:         http://maple:5561/$ca1ADEnclave2Agent/CA/CertificateSigningRequest
LDAP:        ldap://yew:389/dc=1adEnclave2CA,dc=cougaar,dc=org

Subordinate CA 3:
-----------------
DN:          cn=1AD-Enclave3-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:  ca1ADEnclave3Agent
Node name:   ca1ADEnclave3Node
CSR:         http://maple:5561/$ca1ADEnclave3Agent/CA/CertificateSigningRequest
LDAP:        ldap://yew:389/dc=1adEnclave3CA,dc=cougaar,dc=org

Subordinate CA 4:
-----------------
DN:          cn=1AD-Enclave4-CA, ou=CONUS, o=DLA, l=Santa Clara, st=CA, c=US
Agent name:  ca1ADEnclave4Agent
Node name:   ca1ADEnclave4Node
CSR:         http://maple:5561/$ca1ADEnclave4Agent/CA/CertificateSigningRequest
LDAP:        ldap://yew:389/dc=1adEnclave4CA,dc=cougaar,dc=org
