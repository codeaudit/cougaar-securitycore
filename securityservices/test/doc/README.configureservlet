Certificate Authority HOW-TO
============================

This guide describes how to install and configure a simple Certificate
Authority (CA) server for the Cougaar system. The CA provides the following
services:
* Support for multiple Certificate Authorities. Each CA has its own key.
* Web interface to send a certificate signing request (PKCS10 format) to 
  a certificate authority. The certificate authority is specified by its
  distinguished name.
* Web interface to send a signed X.509 certificate.
* Web interface to view issued certificates.
* Web interface to revoke a certificate.

These services are used by Cougaar nodes to automatically generate key pairs
and send certificate requests to a Certificate Authority.

Note:
This certification authority is not intended to replace a COTS or GOTS CA.
In particular, it does not attempt to address all the security issues associated
with a Certificate Authority. The immediate goal of this service is to greatly
facilitate software tests in the Ultra*Log program by allowing to easily install
a Cougaar society without having to manually create certificates and sign them with
a COTS or GOTS Certificate Authority.


Pre-requisite before configuring Servlet
========================================
1. Install tomcat, which can be found at http://www.apache.org.
   Test that the apache servlet engine is working fine by typing:
          http://host:port no/,
   where <host> is the machine on which tomcat is installed and
   <port no> is the port on which tomcat is running. Refer to the tomcat installation
   guide provided with tomcat for further information.
2. Install NAI's security services module.

Procedure to configure servlet for Security services 
====================================================
1. Create a CA directory under Tomcat_Home/webapps
2. Create WEB-INF directory under CA.
3. Copy the web.xml file provided with the securityservices installation
   in the test/configs/servlet/ directory into WEB-INF directory.
4. Create a "classes" and "lib" directory under WEB-INF.
5. Copy core.jar provided by cougaar installation and securityservices.jar from
   securityservices into the lib directory and other directory,
   Refer to compiling and installation doc for securityservices module.
6. Directory structure will be similar to one shown below:
	+-+Tomcat_Home
	  +-+webapps
	    +-+CA
	      +-+WEB-INF
		+-+classes
		| +-+com
		|   +-+nai
		|     +-+security
		|	+-+certauthority (Under this directory put all servlet classes
		+-+lib (Under this directory put core.jar,securityservices.jar,jdom.jar and xerces.jar)
		+-+config
		  +-+certauthority (Should contain all files and directory as decribed in 7)
		  +-+servlet (contains servletjavaproperties)
7. For each Certificate Authority, the following directory structure will be
   created automatically (except for the CA keystore file which must be manually
   installed) when running as a standalone CA:
   top-level directory (as defined by the org.cougaar.security.CA.certpath property)
        +-+ <CA common name>
          +-+ conf
            +-- <keystore file>     (this is the CA keystore file.
            |                        it must be manually installed)
            +-- <serial number file>
            +-- <pkcs10Directory>
            +-+ <x509CertDirectory>
              +-- signed X509 certificates

8. Copy CertificateSigningRequest.class, CertificateDetailsServlet.class,
   CertificateList.class, RevokeCertificateServlet.class into the certauthority directory under 
   Tomcat_home/webapps/CA/WEB-INF/classes/org/cougaar/core/security/certauthority.
   The classes directory only contains the servlet class and all the other helper
   classes required by the servlet should be put in lib directory 
   under Tomcat_home/webapps/CA/WEB-INF/.
   Servlet classes are using classes from securityservices.jar and core.jar.

9. To summarize, create a directory structure as shown below:
     +Tomcat_Home/webapps
     +-+ CA
       +-+ WEB-INF
       | +-- web.xml
       | +-+ classes
       | | +-+ com
       | |   +-+ nai
       | |     +-+ security
       | |       +-+ certauthority
       | |         +-+ certauthority
       | |           +-- CertificateSigningRequest.class
       | |           +-- CertificateDetailsServlet.class
       | |           +-- CertificateList.class
       | |           +-- RevokeCertificateServlet.class
       | +-+ lib
       |   +-- securityservices.jar
       |   +-- core.jar
       +-+config
       | +-+servlet
       |   +-+servletjavapropertie.xml
       +-+certauthority
	 +-+ <CA1>
        |  +-+ conf
        |    +-- <keystore file>
        |    +-- <serial number file>
        |    +-- <pkcs10Directory>
        |    +-+ <x509CertDirectory>
        |      +-- signed X509 certificates
        +-+ <CA2>
          +-+ conf
            +-- <keystore file>
            +-- <serial number file>
            +-- <pkcs10Directory>
            +-+ <x509CertDirectory>
              +-- signed X509 certificates

10. Servlet name to class mapping is specified in web.xml security services module. 
   For installation of security service module refer to README.install.

11 A sample web.xml file is shown below:

<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
    <!-- Define servlets that are included in the example application -->
    <servlet>
        <servlet-name>certrequest</servlet-name>
        <servlet-class>org.cougaar.core.security.certauthority.CertificateSigningRequest</servlet-class>
    </servlet>
    <servlet>
        <servlet-mapping>
        <servlet-name>
	certrequest
        </servlet-name>
        <url-pattern>
            /CertSign
        </url-pattern>
    </servlet-mapping>
</servlet-mapping>
</web-app>
				
The URL used to connect to servlet is as follows:
http://host:portno/CA/servlet/servletname
where host is the name of host running the tomcat server, portno is the port at which
it is running, servlet name is name of the servlet as specified in web.xml under tomcat_home/webapps/CA/
All certificate related service are put under CA URL.



