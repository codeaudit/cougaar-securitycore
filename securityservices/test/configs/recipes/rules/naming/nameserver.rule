
#
# Find all hosts or agents with "NameServer" facets,
# add the server component to the matching agents,
# and set the server system properties in all nodes.
#
#=begin

debug = false

# to use RMI set to nil
http_protocol = "https"

ns_facet = "NameServer"
port = "8888"
prop_server = "org.cougaar.name.server"

# should we explicitly load the server on just the agents running
# servers?  If false then all node-agents will load a server, which
# is wasteful
explicit_plugin=true
plugin = "org.cougaar.core.wp.server.Server"
ipoint = "Node.AgentManager.Agent.WPServer"
prop_implicit_plugin = "org.cougaar.core.load.wp.server"

# should we allow host-based servers?  this option will likely be
# deprecated in the future
allow_host_servers=true

puts "finding facets" if debug

addrs = Array.new
aliases = Array.new
objs = Array.new if explicit_plugin

# find all HNAs with the NameServer facet
### the NameServer facet is now defined in the agent ###
=begin
if allow_host_servers
  society.each_host do |host|
    has_facet = false
    host.each_facet(:role) do |facet|
      if facet[:role] == ns_facet
        has_facet = true
        break
      end
    end
    if has_facet
      puts "adding host #{host.name}" if debug
      objs.push(host) if explicit_plugin
      addrs.push("#{host.name}:#{port}")
    end
  end
end
=end

# can't use "each_agent(true)" due to ACME bug 13190
society.each_node do |node|
  has_facet = false
  node.each_facet(:role) do |facet|
    if facet[:role] == ns_facet
      has_facet = true
      break
    end
  end
  if has_facet
    objs.push(node.agent) if explicit_plugin
  else 
    next unless node.has_component?(plugin)
  end
  puts "adding node #{node.name} on #{node.host.name}" if debug
  
  # figure out the naming server info
  if http_protocol
    # get the http(s) port
    if http_protocol == 'https'
      port = node.secure_cougaar_port
    else
      port = node.cougaar_port
    end
    aliases.push("#{node.name}")
    addrs.push("-#{http_protocol.upcase}:#{http_protocol}://#{node.host.name}:#{port}/\\$\\#{node.name}/httpmts")
  else
    # use rmi
    aliases.push("")
    addrs.push("#{node.name}@#{node.host.name}:#{port}")
  end
end

society.each_agent(false) do |agent|
  has_facet = false
  agent.each_facet(:role) do |facet|
    if facet[:role] == ns_facet
      has_facet = true
      break
    end
  end
  if has_facet
    objs.push(agent) if explicit_plugin
  else 
    next unless agent.has_component?(plugin)
  end
  puts "adding agent #{agent.name} on #{agent.node.host.name}" if debug
  
  # figure out the naming server info
  if http_protocol
    # get http(s) port
    if http_protocol == 'https'
      port = agent.node.secure_cougaar_port
    else
      port = agent.node.cougaar_port
    end
    aliases.push("#{agent.name}")
    # since all communication goes through the node we want the node mts addr
    addrs.push("-#{http_protocol.upcase}:#{http_protocol}://#{agent.node.host.name}:#{port}/\\$\\#{agent.node.name}/httpmts")
  else
    # use rmi
    aliases.push("")
    addrs.push("#{agent.name}@#{agent.node.host.name}:#{port}")
  end
end

puts "found servers[#{addrs.size}]=#{addrs}" if debug

# add server components to the above hosts and agents
#
# this may change to set the servers as an argument, so we
# do this in a separate loop
if explicit_plugin
  objs.each {|obj| 
   if obj.kind_of? Agent
     obj.add_component do |c|
       c.classname = plugin
       c.insertionpoint = ipoint
     end
   elsif obj.kind_of? Host
     obj.each_node do |node|
       node.add_component do |c|
         c.classname = plugin
         c.insertionpoint = ipoint
      end
     end
   else 
     raise "Invalid array object: #{obj}"
   end
  }
end

puts "adding properties" if debug

# set the system properties in all nodes
if !addrs.empty?
  society.each_node do |node|

    addrs.each_index { |idx| 
      name = (idx == 0 ? "" : ".WP-#{idx+1}")
      name = "-D#{prop_server}#{name}"
      
      ns_alias = aliases[idx]
      addr = addrs[idx]
      puts "#{ns_alias}"
      if ns_alias.length > 0
	name2 = "-D#{prop_server}.#{ns_alias}"
        node.override_parameter(name, "#{ns_alias}@")
        node.override_parameter(name2, addr)
        puts "set #{node.name}  #{name}=#{ns_alias}@" if debug
        puts "set #{node.name}  #{name2}=#{addr}" if debug
      else 
        node.override_parameter(name, addr)
        puts "set #{node.name}  #{name}=#{addr}" if debug
      end
    }
    if explicit_plugin
      node.override_parameter("-D#{prop_implicit_plugin}", "false")
    end

  end
end

puts "done with nameserver" if debug
#=end
