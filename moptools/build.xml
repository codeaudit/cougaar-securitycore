<?xml version="1.0" encoding="UTF-8"?>
 
<!-- 
    Ant build script for UltraLog security MOP tools
     
    Usage: ant [-v] <target>
     
    Run ant in the current directory.  If no target is specified, ant will build
    securityservices, jar and sign the jars.  Include  "-v" with ant for verbose mode.
     
    target:
        all         - build, jar and sign securityservices (default).
        cvs-update  - execute "cvs update -d" in the current directory
        with-update - execute the cvs-update and all targets
        install     - execute the all target, and install securityservices 
                      signed jars and configuration files
        javadocs    - create javadocs for securityservices
        tar-docs    - tar and zip the javadocs
        run-tests   - run Junit tests 
        clean-log   - Delete log files
        clean       - Delete .class and .jar files
        help        - print out usage message     
 
   To run junit tests, the following files must be included in the ANT lib directory:
     1) junit.jar
     2) jakarta-ant-1.4.1-optional.jar
-->

<project basedir="." default="all" name="UltraLog security MOP tools">
  
    <!-- prefix for all environment variables -->
    <property environment="env"/>
    <property name="cougaar.install.path" value="${env.COUGAAR_INSTALL_PATH}"/>
    <property name="cougaar.workspace" value="${env.COUGAAR_WORKSPACE}"/>
    <property name="securityservices.base" value="."/>
    <property name="securityservices.sys" value="${securityservices.base}${file.separator}sys"/>
    <property name="securityservices.lib" value="${securityservices.base}${file.separator}lib"/>
    <property name="securityservices.docdir" value="${securityservices.base}${file.separator}doc"/>
    <property name="securityservices.staging" value="${securityservices.base}${file.separator}staging"/>
    <property name="securityservices.configs" value="${securityservices.base}${file.separator}test${file.separator}configs"/> 
    <!-- The classes directory for output classes and jar files -->
    <property name="securityservices.classes" value="classes"/>
    <!-- The output directory for signed jar files -->
    <property name="securityservices.signed" value="${securityservices.classes}${file.separator}signed"/>
    <!-- The base directories where the java source files are located -->
    <property name="securityservices.src" value="${securityservices.base}${file.separator}src"/>
    <!-- The base directories where the regression test files are located -->
    <property name="securityservices.regress" value="${securityservices.base}${file.separator}regress"/>
    <!-- The base directories where the regression test result files are located -->
    <property name="securityservices.results" value="${securityservices.regress}${file.separator}results"/>

	<property name="project.description"
		value="UltraLog security MOP tools"/>
	<property name="project.name"
		value="security_moptools"/>

    <path id="core.class.path">    
        <!-- Cougaar packages -->
        <pathelement location="${cougaar.install.path}/lib/bootstrap.jar"/>
        <pathelement location="${cougaar.install.path}/sys/log4j.jar"/>
        <pathelement location="${cougaar.install.path}/lib/core.jar"/>
        <pathelement location="${cougaar.install.path}/lib/planning.jar"/>
    	<pathelement location="${cougaar.install.path}/lib/util.jar"/>
    	<pathelement location="${cougaar.install.path}/lib/glm.jar"/>
    	<pathelement location="${cougaar.install.path}/lib/servicediscovery.jar"/>
    	<pathelement location="${cougaar.install.path}/lib/aggagent.jar"/>
    	<pathelement location="${cougaar.install.path}/lib/community.jar"/>
       	<pathelement location="${cougaar.install.path}/sys/servlet.jar"/>
        <pathelement location="${securityservices.base}/lib/security/secure_util.jar"/>
        <pathelement location="${securityservices.base}/lib/security/securityservices.jar"/>
        <pathelement location="${securityservices.base}/lib/security/idmef.jar"/>
        <pathelement location="${securityservices.base}/lib/security/secure_monitoring.jar"/>
    </path>

    <target name="tstamp">
        <tstamp>
            <format property="currentTime" pattern="MM/dd/yyyy hh:mm:ss"/>
        </tstamp>
        <echo message="Build started at ${currentTime}"/>
    </target>

    <target name="init" depends="tstamp">
        <mkdir dir="${securityservices.classes}"/>
        <mkdir dir="${securityservices.signed}"/>
        <mkdir dir="${securityservices.docdir}"/>

        <!-- Fix End Of Line characters in source files -->
        <fixcrlf srcdir="${securityservices.src}"
          includes="**/*.java"
           eol="lf" 
           eof="remove"
        />
    </target>

    <!-- Build the org.cougaar.core.security package -->
    <target name="build-securityservices" depends="init">
        <echo message="+++++ Building ${project.description}"/>
        <javac classpathref="core.class.path" debug="true" 
            deprecation="true" destdir="${securityservices.classes}"
            source="1.4">
          <src path="${securityservices.src}"/>
          <include name="org/cougaar/core/security/**"/>
        </javac>
        <echo message="+++++ Built ${project.description}"/>
    </target>
    
    <!-- jar security services -->
    <target name="jar-securityservices" depends="build-securityservices">
        <echo message="+++++ Building jar files"/>
        <jar jarfile="${securityservices.classes}/${project.name}.jar" 
            basedir="${securityservices.classes}"
            includes="org/cougaar/core/security/**"/>
        <echo message="+++++ Built jar files"/>
    </target>
 
    <target name="jar-configs">
        <echo message="+++++ Building configuration jar files"/>
        <jar jarfile="${securityservices.classes}/configs_${project.name}.jar" 
            basedir="${securityservices.configs}"
            includes="security/*.xml,
          	   security/*.dtd,
        	   security/*.conf"/>
        <echo message="+++++ Built configuration jar files"/>
    </target>
    
    <!-- sign security services -->
    <target name="sign-jars" depends="jar-securityservices, jar-configs">
        <echo message="+++++ Signing jar files"/>
        <signjar jar="${securityservices.classes}/${project.name}.jar" alias="privileged" 
            signedjar="${securityservices.signed}/${project.name}.jar"
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
            storepass="keystore" verbose="false"/>
        <signjar jar="${securityservices.signed}/${project.name}.jar" alias="securitymodule" 
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
            storepass="keystore" verbose="false"/>
    	
        <signjar jar="${securityservices.classes}/configs_${project.name}.jar" alias="privileged" 
            signedjar="${securityservices.signed}/configs_${project.name}.jar"
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
            storepass="keystore" verbose="false"/>
        <echo message="+++++ Signed jar files"/>
    </target>
    
    <!-- install security services -->
    <target name="install-signed-jars" depends="sign-jars">
        <echo message="+++++ Installing signed jar files"/>
        <delete dir="${securityservices.staging}" includeEmptyDirs="true" quiet="true"/>
        <mkdir dir="${securityservices.staging}"/>
        <copy todir="${securityservices.staging}/lib">
    	  <fileset dir="${securityservices.signed}">
            <patternset>
               <include name="*.jar"/>
               <exclude name="configs_*.jar"/>
            </patternset>
         </fileset>
        </copy>
        <copy file="${securityservices.lib}/csiutil-1.0.jar" 
            todir="${securityservices.staging}/lib"/>
        <echo message="+++++ Installed signed jar files"/>
    </target>

    <target name="install-reporting">
      <mkdir dir="${securityservices.staging}/csmart/acme_service/src/plugins/acme_security_reporting"/>
      <copy
         todir="${securityservices.staging}/csmart/acme_service/src/plugins/acme_security_reporting">
        <fileset dir="csmart/plugins/acme_security_reporting"/>
      </copy>
      <mkdir dir="${securityservices.staging}/csmart/lib/security/actions"/>
      <copy file="csmart/plugins/acme_security_reporting/resultParser.rb"
            todir="${securityservices.staging}/csmart/lib/security/actions"/>
    </target>
            
    <!-- install files -->
    <target name="install-conf" depends="install-signed-jars, install-reporting">
        <echo message="+++++ Generating ZIP files"/>
  	    <mkdir dir="${securityservices.staging}/Manifest"/>
     	<mkdir dir="${securityservices.staging}/configs/security"/>
  	<mkdir dir="${securityservices.staging}/csmart/config/rules/security/mop"/>
  	<mkdir dir="${securityservices.staging}/csmart/config/rules/security/assessment"/>
        <copy file="${securityservices.signed}/configs_${project.name}.jar" 
          todir="${securityservices.staging}/configs/security"/>
        <copy todir="${securityservices.staging}/csmart/config/rules/security/mop">
            <fileset dir="${securityservices.configs}/recipes/rules">
                <patternset>
                    <include name="*.rule"/>
                </patternset>
            </fileset>
        </copy>
        <copy todir="${securityservices.staging}/csmart/config/rules/security/assessment">
            <fileset dir="${securityservices.configs}/recipes/rules/assessment">
                <patternset>
                    <include name="*.rule"/>
                </patternset>
            </fileset>
        </copy>
        <tstamp>
            <format property="zipTime" pattern="MM/dd/yyyy hh:mm:ss"/>
        </tstamp>
    	<echo message="Built ${zipTime}"
    	   file="${securityservices.staging}/Manifest/${project.name}.txt"/>
     	<echo message="#### Building Zip file"/>
		<zip zipfile="${project.name}.zip" basedir="staging"
		     filesonly="false"/>	
        <echo message="+++++ Generated ZIP file"/>
    </target>
    
    <!-- The ALL target only compiles, jar, and sign jars -->
    <target name="all" depends="tstamp, init, install-conf">
        <echo message="UltraLog ${project.description} Complete"/>
    </target>
    
    <!-- The INSTALL target does everything but cvs-update and javadoc -->
    <target name="install" depends="all">
		<unzip src="${securityservices.base}/${project.name}.zip"
    	     dest="${cougaar.install.path}"/>	
        <echo message="UltraLog ${project.description} Install Complete"/>
    </target>

    <!-- Updating repository before building -->
    <target name="cvs-update">
      <cvs cvsRoot="${env.CVSROOT}" command="update -d"/>
    </target>
    <target name="cvs-update-junit">
      <cvs  command="update -d -A"/>
    </target>
    
    <!-- use 'ant with-update' to update repository executing the ALL target -->
    <target name="with-update" depends="cvs-update, all"/>
    
    <!-- create javadocs for security services and JavaIDMEF -->
    <target name="javadocs" depends="init" description="Generating security services and idmef javadocs">
        <echo message="Creating JavaDocs for security services and JavaIDMEF"/>
        <delete file="${securityservices.docdir}/javadoc.tar.gz" verbose="true"/>
        <javadoc classpathref="core.class.path" destdir="${securityservices.docdir}"
            windowtitle="${project.description} API" sourcepath="${securityservices.src}" 
            packagenames="org.cougaar.core.security.*" 
            author="true" version="true"/>
        <echo message="Generated JavaDocs for ${project.description}"/>
    </target>
	
	  <!-- tar up javadoc and delete all files -->
	  <target name="tar-docs" depends="javadocs">
        <tar tarfile="${securityservices.docdir}/javadoc.tar" basedir="${securityservices.docdir}"
            includes="*.html, *.css, org/*" 
            includesfile="${securityservices.docdir}/package-list"/>
        <gzip zipfile="${securityservices.docdir}/javadoc.tar.gz" 
            src="${securityservices.docdir}/javadoc.tar"/>
        <delete file="${securityservices.docdir}/javadoc.tar" verbose="true"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${securityservices.docdir}">
                <patternset>
                    <include name="**/**"/>
                    <exclude name="**/*.gz"/>
                </patternset>
            </fileset>
        </delete>
    </target>

    <target name="create_cougaar_overlay" depends="all">
	</target>

    <!-- Delete the org class directories, and jar files -->
    <target name="clean">
        <echo message="+++++ Cleaning build environment"/>
        <delete dir="${securityservices.classes}/org" includeEmptyDirs="true" quiet="true"/>
        <delete dir="${securityservices.signed}" includeEmptyDirs="true" quiet="true"/>
        <delete dir="${securityservices.staging}" includeEmptyDirs="true" quiet="true"/>
        <delete quiet="true">
           <fileset dir="${securityservices.classes}" includes="*.jar"/>
        </delete>
        <echo message="+++++ Cleaned build environment"/>
    </target>

    <target name="update-dependencies">
    	<!-- Dependencies are:
    	     * securityservices
    	     * securityutils
    	-->
    	<antcall target="update-dependency">
    		<param name="dependency.module.name" value="securityservices"/>
    		<param name="dependency.module.jar" value="securityservices.jar"/>
    	</antcall>
    	<antcall target="update-dependency">
    		<param name="dependency.module.name" value="securityutils"/>
    		<param name="dependency.module.jar" value="secure_util.jar"/>
    	</antcall>
    	<antcall target="update-dependency">
    		<param name="dependency.module.name" value="securemonitoring"/>
    		<param name="dependency.module.jar" value="secure_monitoring.jar"/>
    	</antcall>
    </target>
    <target name="update-dependency">
       <property name="cvs.command" value="checkout"/>
       <available file="${securityservices.base}/../${dependency.module.name}" type="dir"
                  property="cvs.command" value="update -d">
       </available>
       <echo message="Updating or checking out: ${securityservices.base}/../${dependency.module.name}"/>
	   <cvs cvsRoot="${env.CVSROOT}" cvsRsh="${env.CVS_RSH}"
                command="${cvs.command}" package="${dependency.module.name}"
                dest="${securityservices.base}/../"
                quiet="true"
                failonerror="true"/>
	   <ant antfile="build.xml"
	   	    dir="${securityservices.base}/../${dependency.module.name}"
	   	    inheritAll="false"
	   	    target="with-depend-update">
	   </ant>
	   <copy file="${securityservices.base}/../${dependency.module.name}/classes/signed/${dependency.module.jar}"
		    toDir="${securityservices.base}/lib/security">
	   </copy>
    </target>
    <!-- use 'ant with-update' to update repository executing the ALL target -->
    <target name="with-depend-update" depends="update-dependencies, all"/>

 </project>

<!-- End UltraLog/securityservices ant build script -->
