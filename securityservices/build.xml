<?xml version="1.0" encoding="UTF-8"?>
 
<!-- 
    Generic ant build script for Cougaar security services. 
    
    To get help, type:
       ant help 

    WARNING: The master copy of this file is in the "installer" module.
             Do not modify this file directly under another module.
             Make modifications to custom-build.xml file instead.
             If you really have to modify this file, then changes should
             be propagated to all modules.
-->

<project basedir="." default="all" name="Cougaar security services">

    <property name="securityservices.base" value="."/>

    <dirname property="imported.basedir" file="${ant.file.imported}"/>
    <property file="${imported.basedir}/build.properties"/>

    <!-- Load additional properties which are used to upload
         project artifacts to a web server and perform tests.
         Properties stored in that file should be:
         - webdav.url: The URL where to upload the overlay ZIP file.
            For example, webdav.url=http://panther3.va.cougaarsoftware.com:8080/webdav/cougaar
    -->
    <property file="${user.home}/anthill.properties"/>

    <!-- <echo message="Loaded ${imported.basedir}/build.properties: ${module.superiors}"/> -->
    <!-- The name of a custom build file -->
    <property name="custom.build.file" value="custom-build.xml"/>
    <!-- Import the custom build file -->
    <import file="${custom.build.file}" optional="true"/>

    <target name="ant-contrib-setup" unless="ant.contrib.ext.loaded">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
          <classpath>
             <pathelement location="${securityservices.base}/build/lib/ant-contrib-1.0b1.jar"/>
          </classpath>
        </taskdef>
        <taskdef resource="org/apache/webdav/ant/taskdefs.properties">
          <classpath>
             <fileset dir="${securityservices.base}/build/lib">
                <include name="*.jar"/>
             </fileset>
          </classpath>
        </taskdef>
        <taskdef name="postToCougaarForge"
        	classname="org.cougaar.ant.CougaarForgePostTask"
        	onerror="report">
          <classpath>
            <pathelement location="${securityservices.base}/classes"/>
            <fileset dir="${securityservices.base}/build/lib">
               <include name="*.jar"/>
            </fileset>
          </classpath>
        </taskdef>
        <property name="ant.contrib.ext.loaded" value="true"/>
    </target>

    <target name="init-prop" depends="ant-contrib-setup"> 
      <!-- Anthill integration.
             Inter-Project Dependency allows projects to use the most recent version of artifacts
             of other projects as dependencies. A build property, artifacts.dir, is set on the
             dependency project that corresponds to a directory to store artifacts. Builders of
             that dependency will provide the directory to the mechanism you are using for your
             build. For example, a Ant Builder will create a property for your Ant script with
             the directory named artifacts.dir. All the dependency projects artifacts are
             collected into a single directory for this project. This project is given the
             build property dependency.artifacts.dir, which is the directory all the artifacts
             reside in. Again, builders of your project will provide the directory to the
             mechanism you are using for your build.
      -->
      <if>
        <isset property="anthill.dependency.artifacts.dir"/>
        <then>
          <echo message="Anthill build - Using JAR files from ${anthill.dependency.artifacts.dir}"/>
          <path id="dependency.artifacts.dir.path">    
            <fileset dir="${anthill.dependency.artifacts.dir}">
              <include name="*.jar"/>
            </fileset>
          </path>
        </then>
        <else>
          <path id="dependency.artifacts.dir.path">    
          </path>
          <echo message="Not using anthill build"/>
        </else>
      </if>

      <!-- prefix for all environment variables -->
      <property environment="env"/>
      <property name="securityservices.sys" value="${securityservices.base}${file.separator}sys"/>
      <property name="securityservices.lib" value="${securityservices.base}${file.separator}lib"/>
      <property name="securityservices.configs" value="${securityservices.base}${file.separator}test${file.separator}configs"/> 
      <property name="securityservices.staging" value="${securityservices.base}${file.separator}staging"/>
      <!-- The directory for output compiled Java classes -->
      <property name="securityservices.classes" value="${securityservices.base}${file.separator}classes"/>
      <!-- The directory for ant-generated files (except .class files) -->
      <property name="securityservices.output" value="${securityservices.base}${file.separator}output"/>
      <property name="securityservices.docdir" value="${securityservices.staging}${file.separator}doc"/>
      <!-- The output directory for signed jar files -->
      <property name="securityservices.signed" value="${securityservices.output}${file.separator}signed"/>
      <!-- The base directories where the java source files are located -->
      <property name="securityservices.src" value="${securityservices.base}${file.separator}src"/>
      <!-- The base directories where the regression test files are located -->
      <property name="securityservices.regress" value="${securityservices.base}${file.separator}regress"/>
      <!-- The base directories where the regression test result files are located -->
      <property name="securityservices.results" value="${securityservices.regress}${file.separator}results"/>

      <!--
      <echo message="Dumping properties..."/>
      <echoproperties/>
      -->
      <if>
        <isset property="anthill.cougaar.branch.name"/>
        <then>
          <!-- For anthill integration -->
          <!-- The branch name of the Cougaar Standard Edition -->
          <property name="cougaar.branch.name" value="${anthill.cougaar.branch.name}"/>
          <!-- The parent directory of org.cougaar.install.path -->
          <property name="org.cougaar.install.path.parent" value="${user.home}/nightly-cougaar"/>
          <property name="cougaar.install.path" value="${org.cougaar.install.path.parent}/${cougaar.branch.name}/cip"/>
          <mkdir dir="${cougaar.install.path}"/>
          <property name="cougaar.workspace" value="${cougaar.install.path}/workspace"/>
        </then>
        <else>
          <property name="cougaar.install.path" value="${env.COUGAAR_INSTALL_PATH}"/>
          <property name="cougaar.workspace" value="${env.COUGAAR_WORKSPACE}"/>
        </else>
      </if>
      <echo message="CIP=${cougaar.install.path}"/>

      <!-- Base class path -->
      <path id="base.core.class.path">    
          <path refid="dependency.artifacts.dir.path"/>
          <pathelement location="${cougaar.install.path}/sys/log4j.jar"/>
      </path>

      <dirname property="current.directory.name" file="${securityservices.base}/build.xml"/>
      <echo level="info" message="${current.directory.name}"/>
      <basename property="current.module.name" file="${current.directory.name}"/>
      <!-- Set the property that contains the modules to build. -->
      <property name="module.build.list" value="${module.subordinates},${current.module.name}"/>
    </target> 

    <target name="tstamp" depends="checkversion, ant-contrib-setup, init-prop">
        <tstamp>
            <format property="currentTime" pattern="MM/dd/yyyy hh:mm:ss"/>
        </tstamp>
        <echo message="Build started at ${currentTime}"/>
    </target>

    <target name="checkversion">
       <!--
        <condition property="ant.version.incorrect" value="true">
          <not>
            <contains string="${ant.version}" substring="1.5"/>
          </not>
        </condition>
        <fail message="ant version 1.5 or above is required. Current version is ${ant.version}"
              if="ant.version.incorrect"/>
         -->
        <property name="jdk.version.needed.142" value="1.4.2"/>
        <property name="jdk.version.needed.150" value="1.5.0"/>
        <condition property="vm.version.incorrect" value="true">
          <not>
            <or>
              <contains string="${java.vm.version}" substring="${jdk.version.needed.142}"/>
              <contains string="${java.vm.version}" substring="${jdk.version.needed.150}"/>
            </or>
          </not>
        </condition>
        <fail message="JDK ${jdk.version.needed.142} or ${jdk.version.needed.150} required. Current version is ${java.vm.version}"
              if="vm.version.incorrect"/>
    </target>

    <target name="init" depends="tstamp, ant-contrib-setup, init-prop">
    	<echo message="Initializing ${project.description} build..."/>
        <mkdir dir="${securityservices.classes}"/>
        <mkdir dir="${securityservices.signed}"/>
        <mkdir dir="${securityservices.docdir}"/>

        <!-- make regress directory -->
        <mkdir dir="${securityservices.results}" />
        <mkdir dir="${securityservices.results}/html" />

        <!-- Fix End Of Line characters in source files -->
        <!--
        <fixcrlf srcdir="${securityservices.src}"
          includes="**/*.java"
           eol="lf" 
           eof="remove"
        />
        -->
        <!-- <ant antfile="${custom.build.file}" target="init"> -->
    </target>
   
    <!-- Build the source code package using default method, unless the custom
         property file indicates there is a custom build method. -->
    <target name="default-compile" unless="use.custom.compile">
       <if>
         <available file="${securityservices.src}" type="dir"/>
         <then>
           <javac classpathref="core.class.path" debug="true" 
               deprecation="true" destdir="${securityservices.classes}"
               source="1.4">
             <src path="${securityservices.src}"/>
             <include name="**"/>
          </javac>
         </then>
       </if>
    </target>
    <target name="my-custom-compile" if="use.custom.compile">
       <!-- Use the custom build method if the custom property file says so -->
       <antcall target="custom-compile"/>
    </target>
    <target name="compile" depends="init">
       <echo message="+++++ Building ${project.description}"/>
       <condition property="use.custom.compile">
         <!-- Does the custom-build.xml import file define "custom.compile"? -->
         <isreference refid="custom.compile"/>
       </condition>
       <!-- <echo message="${use.custom.compile}"/> -->
       <antcall target="default-compile"/>
       <echo message="+++++ Built ${project.description}"/>
       <antcall target="my-custom-compile"/>
    </target> 

    <!-- jar security services -->
    <target name="default-jar" unless="use.custom.jar">
       <if>
         <available file="${securityservices.src}" type="dir"/>
         <then>
            <jar jarfile="${securityservices.output}/${project.name}.jar"
                basedir="${securityservices.classes}"
                includes="org/cougaar/**/*.class"/>
         </then>
       </if>
    </target>
    <target name="my-custom-jar" if="use.custom.jar">
       <antcall target="custom-jar"/>
    </target>
    <target name="jar" depends="compile">
       <echo message="+++++ Building jar files"/>
       <condition property="use.custom.jar">
         <!-- Does the custom-build.xml import file define "custom.jar"? -->
         <isreference refid="custom.jar"/>
       </condition>
       <antcall target="default-jar"/>
       <!-- Use the custom build method if the custom property file says so -->
       <antcall target="my-custom-jar"/>
       <echo message="+++++ Built jar files"/>
    </target> 
 
    <target name="jar-configs">
       <echo message="+++++ Building configuration jar files"/>
       <if>
         <available file="${securityservices.configs}" type="dir"/>
         <then>
           <jar jarfile="${securityservices.output}/configs_${project.name}.jar" 
               basedir="${securityservices.configs}"
               includes="security/*"/>
         </then>
       </if>
       <echo message="+++++ Built configuration jar files"/>
    </target> 

    <!-- sign security services -->
    <target name="sign-jars" depends="jar, jar-configs">
        <echo message="+++++ Signing jar files using ${jar.signer.key} alias"/>
        <if>
          <available file="${securityservices.output}/${project.name}.jar" type="file"/>
          <then>
             <!-- "jar.signer.key" should be one of "securitymodule" or "bootstrapper" -->
             <signjar jar="${securityservices.output}/${project.name}.jar" alias="${jar.signer.key}" 
                 signedjar="${securityservices.signed}/${project.name}.jar"
                 keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
                 storepass="keystore" verbose="false"/>
             <signjar jar="${securityservices.signed}/${project.name}.jar" alias="privileged" 
                 keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
                 storepass="keystore" verbose="false"/>
          </then>
        </if>
        <if>
          <available file="${securityservices.output}/configs_${project.name}.jar" type="file"/>
          <then>
             <signjar jar="${securityservices.output}/configs_${project.name}.jar" alias="privileged" 
                 signedjar="${securityservices.signed}/configs_${project.name}.jar"
                 keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
                 storepass="keystore" verbose="false"/>
          </then>
        </if>
        <echo message="+++++ Signed jar files"/>
    </target>

    <!-- install security services -->
    <target name="install-signed-jars" depends="sign-jars">
        <echo message="+++++ Installing signed jar files"/>
        <delete dir="${securityservices.staging}" includeEmptyDirs="true" quiet="true"/>
        <mkdir dir="${securityservices.staging}"/>
        <copy todir="${securityservices.staging}/lib">
          <fileset dir="${securityservices.signed}">
            <patternset>
               <include name="*.jar"/>
               <exclude name="configs_*.jar"/>
            </patternset>
         </fileset>
        </copy>
        <if>
          <isset property="anthill.artifacts.dir"/>
          <then>
            <echo message="Copying jar files to anthill artifact repository..."/>
             <copy todir="${anthill.artifacts.dir}">
                <fileset dir="${securityservices.base}/output/signed">
                  <patternset>
                     <include name="*.jar"/>
                     <exclude name="configs_*.jar"/>
                  </patternset>
               </fileset>
             </copy>
          </then>
        </if>
        <echo message="+++++ Installed signed jar files"/>
    </target>
    
    <!-- install 3rd party jars files -->
    <target name="install-3rdparty-jars">
        <echo message="+++++ Installing jar files"/>
        <!-- Not all modules may have a sys subdirectory, so do not fail if that directory
             does not exist. -->
        <copy todir="${securityservices.staging}/sys" overwrite="true"
              failonerror="false">
            <fileset dir="${securityservices.sys}">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <if>
          <available file="${securityservices.staging}/sys" type="dir"/>
          <then>
            <signjar alias="privileged" 
              keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
              storepass="keystore" verbose="false">
              <!-- It's not a good idea to store the signed version in CVS. It's a pain to remove
                   the signature when upgrading to a new key, especially when the key type changes
                   and the jar file has multiple signatures. -->
                <fileset dir="${securityservices.staging}/sys">
                    <include name="*.jar"/>
                </fileset>
            </signjar>
          </then>
        </if>
        <!-- Not all modules may have a lib subdirectory, so do not fail if that directory
             does not exist. -->
        <copy todir="${securityservices.staging}/lib" overwrite="true"
              failonerror="false">
            <fileset dir="${securityservices.lib}">
            	<include name="*.jar"/>
            </fileset>
        </copy>
        <echo message="+++++ Installed jar files"/>        
    </target>
    
    <target name="my-custom-install-conf" if="use.custom.install">
       <antcall target="custom-install-conf"/>
    </target>
    <!-- install config files -->
    <target name="install-conf" depends="install-signed-jars, install-3rdparty-jars">
       <echo message="+++++ Installing configuration files"/>
       <condition property="use.custom.install">
         <!-- Does the custom-build.xml import file define "custom.install"? -->
         <isreference refid="custom.install"/>
       </condition>
       <antcall target="default-install-conf"/>
       <!-- Use the custom build method if the custom property file says so -->
       <antcall target="my-custom-install-conf"/>
       <echo message="+++++ Installed configuration files"/>
    </target>

    <target name="default-install-conf">
       <mkdir dir="${securityservices.staging}/Manifest"/>
       <mkdir dir="${securityservices.staging}/configs/security"/>
       <mkdir dir="${securityservices.staging}/configs/security/reference"/>

        <!-- Note that there may not be a config jar file -->
        <copy file="${securityservices.signed}/configs_${project.name}.jar" 
            todir="${securityservices.staging}/configs/security"
            failonerror="false"/>
        <!-- Also copy configs_${project.name}.jar in another location where
             we know it won't be modified, to keep a reference file.
             The configs_${project.name}.jar file may be modified every time the
             society is ran. -->
        <copy file="${securityservices.signed}/configs_${project.name}.jar" 
            todir="${securityservices.staging}/configs/security/reference"
            failonerror="false"/>

        <copy todir="${securityservices.staging}/csmart/config/rules/security"
              failonerror="false">
            <fileset dir="${securityservices.configs}/rules">
                <patternset>
                    <include name="**/*.rule"/>
                </patternset>
            </fileset>
        </copy>
    </target>
    
    <!-- The ALL target only compiles, jar, and sign jars -->
    <target name="all" depends="install-conf">
        <tstamp>
            <format property="zipTime" pattern="MM/dd/yyyy hh:mm:ss"/>
        </tstamp>
    	<echo message="Built ${zipTime}"
    	   file="${securityservices.staging}/Manifest/${project.name}.txt"/>
     	<echo message="#### Building Zip file"/>
	<zip zipfile="${project.name}.zip" basedir="staging"/>	
        <echo message="#### Generated ZIP file"/>
        <!-- Upload result to web server -->
        <antcall target="upload-overlay"/>
    </target>

    <!-- This target is used to generate a single ZIP file containing all
         of the security services.
         * Type "ant security-overlay" from the installer module.
         * cd $CIP/configs/ping
         * ruby ASMT-TRANSFORM-EXAMPLE.rb
         * This will generate the following files that should be updated
           in the ZIP file:
             configs/common/config_common.jar
             configs/glmtrans/config_glmtrans.jar
             configs/ping/society_config/*
             configs/security/bootpolicies.jar
             configs/security/configs_securityservices.jar
             configs/security/userFiles.jar
    -->
    <target name="security-overlay" depends="all">
        <delete file="security-overlay.zip"/>
        <for list="${module.build.list}" delimiter="," param="build.module.name">
           <sequential>
             <zip destfile="security-overlay.zip" update="true" basedir="${securityservices.base}/../@{build.module.name}/staging">
             </zip>
           </sequential>
        </for>
         <!--
        <exec dir="${cougaar.install.path}/configs/ping"
              executable="ruby">
          <arg value="ASMT-TRANSFORM-EXAMPLE.rb"/>
        </exec>
        -->
        <zip destfile="security-overlay.zip" update="true">
          <fileset dir="${cougaar.install.path}">
            <patternset>
               <include name="configs/common/config_common.jar"/>
               <include name="configs/glmtrans/config_glmtrans.jar"/>
               <include name="configs/ping/society_config/**"/>
               <include name="configs/security/bootpolicies.jar"/>
               <include name="configs/security/configs_securityservices.jar"/>
               <include name="configs/security/userFiles.jar"/>
            </patternset>
          </fileset>
        </zip>
    </target>

    <!-- The INSTALL target does everything but cvs-update and javadoc -->
    <target name="install" depends="all">
        <echo message="Cougaar security services Install"/>
		<unzip src="${securityservices.base}/${project.name}.zip"
    	     dest="${cougaar.install.path}"/>	
    </target>

    <target name="call-ant-submodule">
       <echo message="Invoking ${ant.target.name} on ${securityservices.base}/../${build.module.name}/build.xml"/>
       <ant antfile="build.xml"
            dir="${securityservices.base}/../${build.module.name}"
            inheritAll="false"
            target="${ant.target.name}">
          <!-- Avoid warning stating we are trying to redefine ant-contrib tasks -->
          <property name="ant.contrib.ext.loaded" value="true"/>
       </ant>
    </target>

    <!-- Build another security services module.
         The name of the module should be provided in the "build.module.name" property.
         Usually the value of "ant.target.name" should be "all" -->
    <target name="build-module">
       <echo message="******************** Building: ${securityservices.base}/../${build.module.name}"/>
       <antcall target="call-ant-submodule">
       </antcall>
    </target>

    <target name="update-superiors">
       <echo message="Copying jar file to superior modules: ${module.superiors}"/>
       <for list="${module.superiors}" delimiter="," param="build.module.superior.name">
          <sequential>
            <echo message="Copying jar file to @{build.module.superior.name}/lib/security module"/>
            <copy todir="${securityservices.base}/../@{build.module.superior.name}/lib/security">
               <fileset dir="${securityservices.base}/output/signed">
                 <patternset>
                    <include name="*.jar"/>
                    <exclude name="configs_*.jar"/>
                 </patternset>
              </fileset>
            </copy>
          </sequential>
       </for>
    </target>

    <target name="all-and-update-superiors" depends="all, update-superiors">
    </target>
    <target name="install-and-update-superiors" depends="install, update-superiors">
    </target>

    <target name="obtain-branch-name">
       <!-- If the installer module was checked out with a sticky tag, then
            use that tag to check out other modules. -->
       <loadfile property="installer.cvs.root" srcFile="../installer/CVS/Root" failonerror="false">
         <filterchain>
           <striplinebreaks/>
         </filterchain>
       </loadfile>
       <cvs cvsRoot="${installer.cvs.root}" cvsRsh="${env.CVS_RSH}"
            command="-q status -v build.xml"
            output="cvs.status.txt"
            failonerror="true"/>
       <loadfile property="cvs.sticky.tag" srcFile="../installer/cvs.status.txt" failonerror="true">
         <filterchain>
           <linecontains>
             <contains value="Sticky Tag:"/>
           </linecontains>
           <striplinebreaks/>
           <tokenfilter>
             <!-- Output format of sticky tag line when executing cvs status build.xml:
                     Sticky Tag:          (none)
                     Sticky Tag:          B11_2 (branch: 1.14.4)
             -->
             <trim/>
             <replaceregex byline="true" pattern="Sticky Tag:\s+(\S*)\s*(\(.+?\))" replace="\1"/>
           </tokenfilter>
         </filterchain>
       </loadfile>
       <if>
         <isset property="cvs.sticky.tag"/>
         <then>
           <property name="cvs.sticky.tag.cmd" value="-r ${cvs.sticky.tag}"/>
         </then>
         <else>
           <property name="cvs.sticky.tag.cmd" value=""/>
         </else>
       </if>
       <echo message="Checking out using tag: ${cvs.sticky.tag.cmd}"/>
       <delete file="../installer/cvs.status.txt"/>
    </target>

    <!-- Check out (or update if module has already been checked out) a security services module
         The name of the module should be provided in the "build.module.name" property. -->
    <target name="update-module" depends="obtain-branch-name">
       <!-- First, determine what the CVSROOT should be.
            1) Get it from CVS/Root in installer module
            2) Get it from a cvsroot.${project.name}.properties file
            3) Try to get it from the CVS/Root file,
            4) otherwise get it from the CVSROOT environment variable. -->
       <if>
         <isset property="installer.cvs.root"/>
         <then>
            <propertyregex property="installer.cvs.user"
              input="${installer.cvs.root}"
              regexp="([^@]*)@([^\@]*)"
              select="\1"
              casesensitive="false" />
            <echo message="installer cvs user: ${installer.cvs.user}"/>
         </then>
       </if>
       <echo message="Loading CVSROOT from cvsroot.${build.module.name}.properties"/>
       <loadfile property="mymodule.cvs.root" srcFile="cvsroot.${build.module.name}.properties" failonerror="false">
         <filterchain>
           <striplinebreaks/>
           <expandproperties/>
         </filterchain>
       </loadfile>
       <if>
         <isset property="mymodule.cvs.root"/>
         <then>
            <propertyregex property="cvs.root"
              input="${mymodule.cvs.root}"
              regexp="([^@]*)@([^\@]*)"
              select="${installer.cvs.user}@\2"
              casesensitive="false" />
            <echo message="cvs repository: ${cvs.root}"/>
         </then>
       </if>
       <if>
         <not>
           <isset property="cvs.root"/>
         </not>
         <then>
           <loadfile property="cvs.root" srcFile="CVS/Root" failonerror="false">
             <filterchain>
               <striplinebreaks/>
             </filterchain>
           </loadfile>
         </then>
       </if>
       <if>
         <not>
           <isset property="cvs.root"/>
         </not>
         <then>
           <property name="cvs.root" value="${env.CVSROOT}"/>
         </then>
       </if>
       <echo message="CVSROOT: ${cvs.root}"/>

       <!-- Set the CVS update or checkout command -->
       <if>
          <available file="${securityservices.base}/../${build.module.name}" type="dir"/>
          <then>
            <!-- Module has been checked out. Update module. -->
            <property name="cvs.command" value="-q update -d ${cvs.sticky.tag.cmd}"/>
          </then>
          <else>
            <!-- Module has not been checked out. Check out module -->
            <property name="cvs.command" value="-Q checkout ${cvs.sticky.tag.cmd}"/>
          </else>
       </if>
       <echo message="Updating or checking out: ${securityservices.base}/../${build.module.name} using ${cvs.sticky.tag.cmd}"/>
       <cvs cvsRoot="${cvs.root}" cvsRsh="${env.CVS_RSH}"
            command="${cvs.command}" package="${build.module.name}"
            dest="${securityservices.base}/../"
            failonerror="true"/>
    </target>

    <!-- Checkout or update a list of modules provided in the "module.build.list" property -->
    <target name="process-interactive-command">
       <switch value="${build.choice}">
         <case value="1">
           <!-- First, obtain the branch name of the installer module -->
 <!--           <antcallback target="obtain-branch-name" return="cvs.sticky.tag.cmd"/> -->
           <!-- Update modules -->
           <foreach list="${module.build.list}" delimiter="," target="update-module"
                    param="build.module.name" inheritall="true">
           </foreach>
         </case>
         <case value="2">
           <!-- Build modules. The modules should have been previously checked out. -->
           <for list="${module.build.list}" delimiter="," param="build.module.name">
             <sequential>
               <antcall target="build-module">
                  <param name="ant.target.name" value="all-and-update-superiors"/>
                  <param name="build.module.name" value="@{build.module.name}"/>
               </antcall>
             </sequential>
             <!-- <param name="module.superiors" value="${module.superiors}"/> -->
           </for>
         </case>
         <case value="3">
           <!-- Build and install modules. The modules should have been previously checked out. -->
           <foreach list="${module.build.list}" delimiter="," target="build-module"
                    param="build.module.name" inheritall="true">
             <param name="ant.target.name" value="install-and-update-superiors"/>
           </foreach>
         </case>
         <case value="4">
           <!-- First, obtain the branch name of the installer module -->
 <!--           <antcallback target="obtain-branch-name" return="cvs.sticky.tag.cmd"/> -->
           <!-- Update and build modules. -->
           <foreach list="${module.build.list}" delimiter="," target="update-module"
                    param="build.module.name" inheritall="true">
           </foreach>
           <foreach list="${module.build.list}" delimiter="," target="build-module"
                    param="build.module.name" inheritall="true">
             <param name="ant.target.name" value="all-and-update-superiors"/>
           </foreach>
         </case>
         <case value="5">
           <!-- First, obtain the branch name of the installer module -->
 <!--           <antcallback target="obtain-branch-name" return="cvs.sticky.tag.cmd"/> -->
           <!-- Update, build and install modules. -->
           <foreach list="${module.build.list}" delimiter="," target="update-module"
                    param="build.module.name" inheritall="true">
           </foreach>
           <foreach list="${module.build.list}" delimiter="," target="build-module"
                    param="build.module.name" inheritall="true">
             <param name="ant.target.name" value="install-and-update-superiors"/>
           </foreach>
         </case>
         <case value="6">
           <antcall target="install"/>
         </case>
         <case value="7">
           <for list="${module.build.list}" delimiter="," param="build.module.name">
             <sequential>
               <antcall target="call-ant-submodule">
                  <param name="ant.target.name" value="clean"/>
                  <param name="build.module.name" value="@{build.module.name}"/>
               </antcall>
             </sequential>
           </for>
         </case>
         <case value="8">
           <for list="${module.build.list}" delimiter="," param="build.module.name">
             <sequential>
               <antcall target="call-ant-submodule">
                  <param name="ant.target.name" value="javadocs"/>
                  <param name="build.module.name" value="@{build.module.name}"/>
               </antcall>
             </sequential>
           </for>
         </case>
          <case value="9">
          <!-- binary distribution, zip everything in staging -->
            <for list="${module.build.list}" delimiter="," param="build.module.name">
              <sequential>
               <if>
                <equals arg1="installer" arg2="@{build.module.name}"/>
                <then>
                  <echo message="Installer has no binary distribution"/>
                </then>
                <else>
                  <antcall target="call-ant-submodule">
                    <param name="ant.target.name" value="create-binary-dist"/>
                    <param name="build.module.name" value="@{build.module.name}"/>
                  </antcall>
               </else>
               </if>
              </sequential>
            </for>
         </case>
         <case value="10">
         <!-- source distribution -->
         <!-- zip build, build.properties, build.xml, custom-build.xml, lib, src, test -->
           <for list="${module.build.list}" delimiter="," param="build.module.name">
             <sequential>
               <if>
                 <equals arg1="installer" arg2="@{build.module.name}"/>
                 <then>
                   <echo message="Installer has no source distribution"/>
                 </then>
                 <else>
                   <antcall target="call-ant-submodule">
                     <param name="ant.target.name" value="create-src-dist"/>
                     <param name="build.module.name" value="@{build.module.name}"/>
                   </antcall>
                 </else>
               </if>
             </sequential>
           </for>
         </case>
         <case value="11">
           <for list="${module.subordinates}" delimiter="," param="build.module.name">
             <sequential>
                <echo message="Copying build.xml file to ${securityservices.base}/../@{build.module.name}"/>
                <copy toDir="${securityservices.base}/../@{build.module.name}"
                      file="build.xml"/>
             </sequential>
           </for>
         </case>
         <case value="12">
           <input message="Enter commit message:" addproperty="commit.message"/>
           <antcall target="commit-build-file">
             <param name="build.module.name" value="installer"/>
           </antcall>
           <for list="${module.subordinates}" delimiter="," param="build.module.name">
             <sequential>
                <echo message="Copying build.xml file to ${securityservices.base}/../@{build.module.name}"/>
                <copy toDir="${securityservices.base}/../@{build.module.name}"
                      file="build.xml"/>
                <antcall target="commit-build-file">
                   <param name="build.module.name" value="@{build.module.name}"/>
                </antcall>
             </sequential>
           </for>
         </case>
         <default>
            <fail message="The value of property build.choice is invalid"/>
         </default>
       </switch>
    </target>

    <target name="commit-build-file">
       <!-- First, determine what the CVSROOT should be.
            1) Get it from a cvsroot.${project.name}.properties file
            2) Try to get it from the CVS/Root file,
            3) otherwise get it from the CVSROOT environment variable. -->
       <echo message="Loading CVSROOT from cvsroot.${build.module.name}.properties"/>
       <loadfile property="cvs.root" srcFile="cvsroot.${build.module.name}.properties" failonerror="false">
         <filterchain>
           <striplinebreaks/>
           <expandproperties/>
         </filterchain>
       </loadfile>
       <if>
         <not>
           <isset property="cvs.root"/>
         </not>
         <then>
           <loadfile property="cvs.root" srcFile="CVS/Root" failonerror="false">
             <filterchain>
               <striplinebreaks/>
             </filterchain>
           </loadfile>
         </then>
       </if>
       <if>
         <not>
           <isset property="cvs.root"/>
         </not>
         <then>
           <property name="cvs.root" value="${env.CVSROOT}"/>
         </then>
       </if>
       <echo message="CVSROOT: ${cvs.root}"/>
       <cvs cvsRoot="${cvs.root}" cvsRsh="${env.CVS_RSH}"
            command="-q commit -m '${commit.message}' build.xml"
            dest="${securityservices.base}/../${build.module.name}"
            failonerror="true"/>
    </target>

    <target name="interactive" depends="tstamp">

       <echo level="info" message="***** Cougaar security services interactive build *****"/>
       <echo level="info" message="*******************************************************"/>
       <echo level="info" message="Current module:"/>
       <echo level="info" message="       =>    ${current.module.name}"/>
       <echo level="info" message="This module depends on the following modules:"/>
       <for list="${module.subordinates}" delimiter="," param="build.module.name">
         <sequential>
            <echo message="       =>    @{build.module.name}"/>
         </sequential>
       </for>
       <echo level="info" message=""/>
       <echo level="info" message="1: Checkout (or update if modules are already checked out) the modules listed above."/>
       <echo level="info" message="     The modules will be checked out or updated in the parent directory of this module."/>
       <echo level="info" message="2: Build the modules listed above."/>
       <echo level="info" message="     The modules listed above must have been checked out previously."/>
       <echo level="info" message="3: Build and install the modules listed above."/>
       <echo level="info" message="     The modules listed above must have been checked out previously."/>
       <echo level="info" message="4: Update and build the modules listed above."/>
       <echo level="info" message="5: Update, build and install the modules listed above."/>
       <echo level="info" message="6: Build and install current module (${current.module.name}) only."/>
       <echo level="info" message="7: Invoke 'ant clean' on all modules listed above."/>
       <echo level="info" message="8: Build java doc"/>
       <if>
         <equals arg1="installer" arg2="${current.module.name}"/>
         <then>  
           <echo level="info" message="9: Create binary distribution for all modules."/>
           <echo level="info" message="     The modules listed above must have been checked out and built previously."/>
           <echo level="info" message="10: Create source distribution for all modules."/>
           <echo level="info" message="     The modules listed above must have been checked out previously."/>
           <echo level="info" message="11: Copy            build.xml to all other modules"/>
           <echo level="info" message="12: Copy and commit build.xml to all other modules"/>
           <input message="Enter your choice:" validargs="1,2,3,4,5,6,7,8,9,10,11,12" addproperty="build.choice"/>
         </then>
         <else>
           <echo level="info" message="9: Create binary distribution for ${current.module.name}."/>
           <echo level="info" message="     The modules listed above must have been checked out and built previously."/>
           <echo level="info" message="10: Create source distribution for ${current.module.name}."/>
           <echo level="info" message="     The modules listed above must have been checked out previously."/>
           <input message="Enter your choice:" validargs="1,2,3,4,5,6,7,8,9,10" addproperty="build.choice"/>
         </else>
       </if>
       <antcall target="process-interactive-command"/>
    </target>
		
    <target name="javadocs"  depends="init">
       <antcall target="internal-javadocs"/>
    </target>

    <!-- create javadocs -->
    <target name="internal-javadocs" depends="init" description="Generating javadoc">
        <if>
          <available file="${securityservices.base}/src" type="dir"/>
          <then>
             <pathconvert targetos="unix" property="wl.path.unix" refid="core.class.path">
             </pathconvert>
             <echo message="Creating JavaDocs: ${wl.path.unix}"/>
             <delete file="${securityservices.docdir}/${project.name}-docs.zip" verbose="true"/>
             <javadoc
                 classpathref="core.class.path"
                 destdir="${securityservices.docdir}"
                 windowtitle="Cougaar ${project.name} services API"
                 author="true"
                 use="true"
                 version="true">
               <packageset dir="${securityservices.src}" defaultexcludes="yes">
                 <include name="edu/**"/>
                 <include name="org/cougaar/core/security/**"/>
               </packageset>
             </javadoc>
             <zip zipfile="${securityservices.staging}/${project.name}-docs.zip" basedir="${securityservices.docdir}"/>	
             <echo message="Generated JavaDocs"/>
          </then>
        </if>
    </target>
	
    <!-- Delete the ant-generated and $CIP/workspace directory -->
    <target name="clean" depends="init-prop">
        <echo message="+++++ Cleaning environment"/>
        <delete dir="${securityservices.classes}"          includeEmptyDirs="true" quiet="true"/>
        <delete dir="${securityservices.output}"           includeEmptyDirs="true" quiet="true"/>
        <delete dir="${securityservices.regress}/results"  includeEmptyDirs="true" quiet="true"/>
        <delete dir="${securityservices.staging}"          includeEmptyDirs="true" quiet="true"/>
        <delete quiet="true">
            <fileset dir="${securityservices.base}" includes="*.zip"/>
        </delete>
        <delete dir="${cougaar.workspace}" includeEmptyDirs="true" quiet="true"/>
        <echo message="+++++ Cleaned environment"/>
    </target>

    <target name="help">
        <echo message="Ant build script for Ultra*Log securityservices."/>
        <echo message=""/>
        <echo message="Usage: ant [-v] &lt;target&gt;"/>
        <echo message=""/>
        <echo message="target:"/>
        <echo message="    all         - build, jar and sign securityservices (default)."/>
        <echo message="    install     - execute the all target, and install module"/>
        <echo message="                  signed jars and configuration files"/>
        <echo message="    interactive - display an interactive menu to build the security services"/>
        <echo message="    javadocs    - create javadocs for the module"/>
        <echo message="    clean       - Delete build environment"/>
        <echo message="    help        - print out the usage message"/>
    </target>
        
    <target name="confjar">
        
        <delete quiet="true">
          <fileset  dir="${cougaar.install.path}/configs/common" includes="*.jar"/>
        </delete>
        <delete quiet="true">
          <fileset  dir="${cougaar.install.path}/configs/glmtrans" includes="*.jar"/>
        </delete>
        <delete quiet="true">
          <fileset  dir="${cougaar.install.path}/planning/data/common" includes="*.jar"/>
        </delete>

        <jar jarfile="${securityservices.output}/config_common.jar" 
            basedir="${cougaar.install.path}/configs/common/"
            excludes="*.jar"/>
        <jar jarfile="${securityservices.output}/config_glmtrans.jar"
            basedir="${cougaar.install.path}/configs/glmtrans/"
            excludes="*.jar"/>
        <jar jarfile="${securityservices.output}/config_planning.jar"
            basedir="${cougaar.install.path}/planning/data/common/"
            excludes="*.jar"/>
 
        <signjar jar="${securityservices.output}/config_common.jar" alias="privileged" 
            signedjar="${cougaar.install.path}/configs/common/config_common.jar"
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore" 
            storepass="keystore" verbose="false"/>
        <signjar jar="${securityservices.output}/config_glmtrans.jar" alias="privileged"
            signedjar="${cougaar.install.path}/configs/glmtrans/config_glmtrans.jar"
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore"
            storepass="keystore" verbose="false"/>
        <signjar jar="${securityservices.output}/config_planning.jar" alias="privileged"
            signedjar="${cougaar.install.path}/planning/data/common/config_planning.jar"
            keystore="${securityservices.configs}/sign-jars/signingCA_keystore"
            storepass="keystore" verbose="false"/>

    </target>
    
    <target name="create-binary-dist">
      <input message="Enter the version of the ${project.name} module:" addproperty="module.version"/>
      <if>
        <available file="${securityservices.staging}" type="dir"/>
        <then>
          <!-- copy the depended modules into the staging area.  staging dir is cleaned up prior
               to creating a zip file, so there isn't a need to remove it -->
          <copy todir="${securityservices.staging}/lib"
              failonerror="false">
            <fileset dir="${securityservices.lib}/security">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
          </copy>
          <echo message="creating binary distribution for ${project.name} v${module.version}"/>
          <zip zipfile="${project.name}${module.version}.zip" basedir="${securityservices.staging}"/>
        </then>
        <else>
          <echo level="error" message="staging directory does not exist.  Please build ${project.name} before creating binary distribution."/>
        </else>
      </if>
    </target>
    
    <target name="create-src-dist">
      <input message="Enter the version of the ${project.name} module:" addproperty="module.version"/>
    <!-- zip build, build.properties, build.xml, custom-build.xml, lib, src, test -->
      <echo message="creating source distribution for ${project.name} v${module.version}"/>
      <zip zipfile="${project.name}${module.version}-src.zip" basedir="."
        includes="build/**, build.properties, build.xml, custom-build.xml, doc/**, lib/**, src/**, test/**"
        excludes="**/CVS"/>
    </target>
    
    <target name="upload-overlay">
      <if>
    	<and>
          <isset property="anthill.branch.name"/>
       	  <isset property="cougaar.branch.name"/>
        </and>
        <then>
            <property name="overlay.zip.name" value="${project.name}-SNAPSHOT-${anthill.branch.name}-${cougaar.branch.name}.zip"/>
            <copy file="${project.name}.zip" tofile="${overlay.zip.name}"/>
        </then>
      </if>
      <if>
      	<and>
          <isset property="webdav.url"/>
          <isset property="anthill.branch.name"/>
      	  <isset property="cougaar.branch.name"/>
      	  <isset property="overlay.zip.name"/>
        </and>
        <then>
          <echo message="Uploading ${overlay.zip.name} to ${webdav.url}"/>
          <davput url="${webdav.url}" verbose="true" overwrite="true">
            <fileset dir="${securityservices.base}">
               <include name="${overlay.zip.name}"/>
            </fileset>
          </davput>
        </then>
      </if>
      <if>
        <!-- The following properties should be defined in an external file:
              +  cougaarforge.post.url - The URL used to upload a file using POST
                                         Typically defined under "build.properties" under each project
              +  cougaarforge.doUpload - true (upload) or false (don't upload)
                                         Typically defined under ${user.home}/anthill.properties
              +  cougaarforge.username 
                                         Typically defined under ${user.home}/anthill.properties
              +  cougaarforge.password 
                                         Typically defined under ${user.home}/anthill.properties
        -->
        <and>
          <isset property="cougaarforge.doUpload"/>
          <isset property="anthill.branch.name"/>
    	  <isset property="cougaar.branch.name"/>
        </and>
        <then>
          <echo message="Uploading ${overlay.zip.name} to cougaarforge"/>
          <!--
          <scp file="${securityservices.base}/${overlay.zip.name}"
               todir="${env.USER}@securitycore.cougaar.org:/var/www/gforge-projects/securitycore/auto/${anthill.branch.name}-${cougaar.branch.name}"
               keyfile="${user.home}/.ssh/id_rsa"/>
          -->
          <!--
            certauthority:      http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=54
            fwsupport:          http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=46
            securebootstrapper: http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=51
            securemonitoring:   http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=52
            securitycore:       http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=55
            securityutils:      http://cougaar.org/frs/admin/qrs.php?package_id=&group_id=53

            Login page: http://cougaar.org/account/login.php
          -->
          <if>
          	<isset property="cougaarforge.unixname"/>
          	<then>
          		<property name="cougaarforge.project.unixname" value="${cougaarforge.unixname}"/>
          	</then>
          	<else>
          		<property name="cougaarforge.project.unixname" value="${project.name}"/>
          	</else>
          </if>
          <echo message="Posting ${project.name} to CougaarForge - project [${cougaarforge.project.unixname}]"/>
          <dirname property="upload.file.path" file="${securityservices.base}/${overlay.zip.name}"/>
          <postToCougaarForge url="http://cougaar.org"
          	    verbose="true"
          	    username="${cougaarforge.username}" password="${cougaarforge.password}"
          	    unixprojectname="${cougaarforge.project.unixname}">
            <prop name="userfile"     value="${upload.file.path}/${overlay.zip.name}"/>
            <prop name="release_name" value="${project.name}-${anthill.branch.name}-${cougaar.branch.name}"/>
            <prop name="type_id"      value="3000"/>
            <prop name="processor_id" value="8000"/>
          </postToCougaarForge>
        </then>
      </if>
    </target>
</project>

<!-- End Cougaar securityservices ant build script -->
