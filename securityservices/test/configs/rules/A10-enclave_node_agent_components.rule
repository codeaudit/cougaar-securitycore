#!/usr/bin/ruby
####################################################
# enclave_safeguard_component.rule

require 'security/lib/common_security_rules'

policyFactory = "org.cougaar.core.security.provider.PolicyComponentFactory"

def addSecurityComponentFactory(node, clsName, enclave, community)
  # Add the security component factory
  node.agent.add_component do |c|
    c.name = clsName
    c.classname = clsName
    c.priority = "HIGH"
    c.insertionpoint = "Node.AgentManager.Agent.SecurityComponent"
    c.add_argument(community)
  end
end

society.each_node do |node|
  enclave = nil
  community = nil
  
  enclave = node.host.get_facet(:enclave)
  if enclave == nil
    puts "Error: no 'enclave' facet for Node #{node.name} - Host #{node.host.name}"
  end
  enclave = enclave.capitalize
  community = enclave + "-SECURITY-COMM"

  addSecurityComponentFactory(node, policyFactory, enclave, community)

  if !$disableKaosPolicy
    # Find the associated policy manager agent
    policyManagerAgentName = nil
    society.each_agent do |ag|
      e = ag.node.host.get_facet(:enclave).capitalize
      ag.each_facet do |f|
        #puts "#{ag.name} - #{f[:role]} - #{$facetPolicyManagerAgent} - #{e} - #{enclave}"
        if (f[:role] == $facetPolicyManagerAgent) && (e == enclave)
          policyManagerAgentName = ag.name
          break
        end
      end
      if (policyManagerAgentName != nil)
        break
      end
    end

    if policyManagerAgentName != nil
      #puts "Found policy manager: #{policyManagerAgentName}"
      # Add the KAoS guard
      node.agent.add_component do |c|
        c.name = "safe.util.SAFESecurityComponentEnclave" + enclave
        c.classname = "safe.util.SAFESecurityComponent"
        c.priority = "HIGH"
        c.insertionpoint = "Node.AgentManager.Agent.SecurityComponent"
        c.add_argument(policyManagerAgentName)
        c.add_argument(enclave + "Domain")
        c.add_argument("http://ontology.ihmc.us/DomainManagementAction.owl#RegisterAction")
      end
    end
  end
end

